[
  {
    "code": 1002,
    "codeText": "TS1002",
    "title": "Unterminated string literal.",
    "category": "error",
    "documentation": "Occurs when there is an unterminated string literal somewhere. String literals\nmust be enclosed by single (`'`) or double (`\"`) quotes.\n\nOften, it caused by an attempt to use a string literal over multiple lines:\n\n```ts\nconst str = \"Here is some text\n  that I want to break\n  across multiple lines.\";\n```\n",
    "tags": [
      "syntax-error",
      "incomplete-code",
      "strings"
    ],
    "related": [
      1003
    ],
    "fixes": [
      {
        "title": "Multiple Lines",
        "body": "If you are trying to break a string across multiple lines, you can use template\nliterals using the backtick (`` ` ``) instead:\n\n```ts\nconst str = `Here is some text\n  that I want to break\n  across multiple lines.`;\n```\n\nOr you can use string concatenation:\n\n```ts\nconst str = \"Here is some text\" +\n  \"that I want to break \" +\n  \"across multiple lines.\";\n```\n\nOr you can use a backslash (`\\`) at the end of the line:\n\n```ts\nconst str = \"Here is some text \\\n  that I want to break \\\n  across multiple lines.\";\n```\n"
      }
    ]
  },
  {
    "code": 1003,
    "codeText": "TS1003",
    "title": "Identifier expected.",
    "category": "error",
    "documentation": "",
    "tags": [
      "syntax-error",
      "incomplete-code"
    ],
    "related": [
      1002
    ]
  },
  {
    "code": 1005,
    "codeText": "TS1005",
    "title": "'{0}' expected.",
    "category": "error",
    "documentation": "Occurs when various syntax characters are making the code invalid.\n",
    "tags": [
      "syntax-error",
      "incomplete-code"
    ],
    "related": [
      1002
    ],
    "fixes": [
      {
        "title": "'=' expected with type aliases",
        "body": "Unlike interfaces, type aliases must have a left hand side and right hand side\nof a statement, so code like this is invalid syntax:\n\n```ts\ntype Person {\n  age: number;\n  name: string;\n}\n```\n\nInstead it should look like this:\n\n```ts\ntype Person = {\n  age: number;\n  name: string;\n};\n```\n"
      },
      {
        "title": "';' expected with arrow functions",
        "body": "Code like this is trying to implicitly return an object with the map function,\nbut is actually invalid syntax:\n\n```ts\nconst items = [[\"a\", 1], [\"b\", 2]];\nconst mapped = items.map(([key, value]) => { [key]: value });\n```\n\nInstead, use parenthesis (`()`) around the return value:\n\n```ts\nconst items = [[\"a\", 1], [\"b\", 2]];\nconst mapped = items.map(([key, value]) => ({ [key]: value }));\n```\n"
      }
    ]
  },
  {
    "code": 1006,
    "codeText": "TS1006",
    "title": "A file cannot have a reference to itself.",
    "category": "error",
    "documentation": "When using\n[Triple-Slash Directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html),\nif a file references itself, this error will appear.\n\n**test.ts**\n\n```ts\n/// <reference path=\"./test.ts\" />\n```\n",
    "tags": [
      "triple-slash"
    ],
    "fixes": [
      {
        "title": "Remove the reference",
        "body": "To fix the issue, just remove the reference. It is unnecessary as you can\nalready access everything in the file.\n"
      }
    ]
  },
  {
    "code": 1007,
    "codeText": "TS1007",
    "title": "The parser expected to find a '{1}' to match the '{0}' token here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1009,
    "codeText": "TS1009",
    "title": "Trailing comma not allowed.",
    "category": "error",
    "documentation": "If an inheritance clause (`extends` or `implements`) has a trailing comma, this\nerror is reported:\n\n```ts\ninterface A {}\n\nclass B implements A {\n}\n```\n",
    "tags": [
      "trailing-comma",
      "syntax-error"
    ],
    "fixes": [
      {
        "title": "Remove trailing comma",
        "body": "Remove the trailing comma:\n\n```ts\ninterface A {}\n\nclass B implements A {\n}\n```\n"
      }
    ]
  },
  {
    "code": 1010,
    "codeText": "TS1010",
    "title": "'*/' expected.",
    "category": "error",
    "documentation": "Occurs when a block comment is not properly terminated before the end of the\nfile is reached:\n\n```ts\n/**\n * Comment text\n *\nfunction test() {}\n```\n",
    "tags": [
      "syntax-error",
      "incomplete-code"
    ],
    "fixes": [
      {
        "title": "Terminate block comment",
        "body": "Properly terminate the block comment:\n\n```ts\n/**\n * Comment text\n */\nfunction test() {}\n```\n"
      }
    ]
  },
  {
    "code": 1011,
    "codeText": "TS1011",
    "title": "An element access expression should take an argument.",
    "category": "error",
    "documentation": "When accessing a property of an array or object with bracket notation, you will\nget this error if no property is supplied.\n\n```ts\nconst a = [1, 2, 3]\nconst b = a[]\n\n// or\nconst c = { d: 4 }\nconst d = c[]\n```\n",
    "tags": [
      "syntax-error",
      "missing-code"
    ],
    "fixes": [
      {
        "title": "Provide an index argument",
        "body": "To fix the error, provide an index or property:\n\n```ts\nconst a = [1, 2, 3];\nconst b = a[1];\n\n// or\nconst c = { d: 4 };\nconst d = c[\"d\"];\n```\n"
      }
    ]
  },
  {
    "code": 1012,
    "codeText": "TS1012",
    "title": "Unexpected token.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1013,
    "codeText": "TS1013",
    "title": "A rest parameter or binding pattern may not have a trailing comma.",
    "category": "error",
    "documentation": "If a function uses destructuring to consume the last argument in a function or\nhas a rest argument, the argument may not have a trailing comma.\n\n```ts\nfunction test(...args: any[]) {}\n```\n",
    "tags": [
      "syntax-error",
      "tailing-comma"
    ],
    "related": [
      1014
    ],
    "fixes": [
      {
        "title": "Remove trailing comma",
        "body": "To fix the error, remove the trailing comma:\n\n```ts\nfunction test(...args: any[]) {}\n```\n"
      }
    ]
  },
  {
    "code": 1014,
    "codeText": "TS1014",
    "title": "A rest parameter must be last in a parameter list.",
    "category": "error",
    "documentation": "It is not possible to have multiple rest parameters, or have rest parameters\nbefore regular parameters since they consume all other arguments.\n\n```ts\nfunction printf(...args: any[], format: string) {}\n// or\nfunction callMany<T extends any[]>(\n  ...functions: ((...args: T[]) => void)[],\n  ...args: T\n) {}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "related": [
      1013
    ],
    "fixes": [
      {
        "title": "Move rest parameter to the end",
        "body": "Consider moving the rest parameter to the end:\n\n```ts\nfunction printf(format: string, ...args: any[]) {}\n```\n"
      },
      {
        "title": "Accept an array",
        "body": "Consider accepting an array of arguments:\n\n```ts\nfunction printf(args: any[], format: string) {}\n\nfunction callMany<T extends any[]>(\n  functions: ((...args: T[]) => void)[],\n  ...args: T\n) {}\n```\n"
      }
    ]
  },
  {
    "code": 1015,
    "codeText": "TS1015",
    "title": "Parameter cannot have question mark and initializer.",
    "category": "error",
    "documentation": "If a parameter is marked as optional with `?`, it means that passing `undefined`\nis acceptable. If a parameter is marked as optional by providing an initializer,\nit communicates to readers that if not provided (or set to `undefined`) the\ndefault will be used. It doesn't make sense to use both modifiers.\n\n```ts\nfunction test(a?: number = 0) {}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "related": [
      1016
    ],
    "fixes": [
      {
        "title": "Remove the question mark or the initializer",
        "body": "Remove the question mark if the default better communicates your intent, or\nremove the initializer:\n\n```ts\nfunction test(a: number = 0) {}\n// or\nfunction test(a?: number) {}\n```\n"
      }
    ]
  },
  {
    "code": 1016,
    "codeText": "TS1016",
    "title": "A required parameter cannot follow an optional parameter.",
    "category": "error",
    "documentation": "When a parameter is marked as optional with ? it indicates that callers can omit\nthe argument when calling the function. If another parameter is required after\nthe optional parameter, the ? would be effectively invalidated since users must\npass the argument in order to provide the later required argument.\n\n```ts\nfunction test(a?: number, b: number) {}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "related": [
      1015
    ],
    "fixes": [
      {
        "title": "Allow the argument to be undefined.",
        "body": "Explicitly union the first argument with undefined and omit the question mark:\n\n```ts\nfunction test(a: number | undefined, b: number) {}\n```\n"
      },
      {
        "title": "Re-order parameters",
        "body": "Reorder the parameters so that required parameters appear before the optional\nones:\n\n```ts\nfunction test(b: number, a?: number) {}\n```\n"
      }
    ]
  },
  {
    "code": 1017,
    "codeText": "TS1017",
    "title": "An index signature cannot have a rest parameter.",
    "category": "error",
    "documentation": "When writing an index signature, there must be exactly one parameter which is\nnot a rest parameter:\n\n```ts\ninterface A {\n  [...index: string]: boolean;\n}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "fixes": [
      {
        "title": "Remove the ellipsis.",
        "body": "To fix the error, just remove the ellipsis token (`...`):\n\n```ts\ninterface A {\n  [index: string]: boolean;\n}\n```\n\nIf you meant to state that the describes a function, use parenthesis rather than\nbrackets:\n\n```ts\ninterface A {\n  (...args: string[]): boolean;\n}\n```\n"
      }
    ]
  },
  {
    "code": 1018,
    "codeText": "TS1018",
    "title": "An index signature parameter cannot have an accessibility modifier.",
    "category": "error",
    "documentation": "Unlike regular function parameters, index signature parameters cannot have an\naccessibility modifier:\n\n```ts\ninterface A {\n  [private index: string]: boolean;\n}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "fixes": [
      {
        "title": "Remove accessability modifier.",
        "body": "To fix the error, just remove the accessibility modifier:\n\n```ts\ninterface A {\n  [index: string]: boolean;\n}\n```\n"
      }
    ]
  },
  {
    "code": 1019,
    "codeText": "TS1019",
    "title": "An index signature parameter cannot have a question mark.",
    "category": "error",
    "documentation": "Unlike regular function parameters, index signature parameters cannot be marked\noptional. The parameter will always exist when determining the type:\n\n```ts\ninterface A {\n  [index?: string]: boolean;\n}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "fixes": [
      {
        "title": "Remove the question mark token.",
        "body": "To fix the error, just remove the `?` token:\n\n```ts\ninterface A {\n  [index: string]: boolean;\n}\n```\n"
      }
    ]
  },
  {
    "code": 1020,
    "codeText": "TS1020",
    "title": "An index signature parameter cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1021,
    "codeText": "TS1021",
    "title": "An index signature must have a type annotation.",
    "category": "error",
    "documentation": "When defining an index signature, the signature must provide a type:\n\n```\ninterface A {\n  [a: string]\n}\n```\n",
    "tags": [
      "syntax-error"
    ],
    "fixes": [
      {
        "title": "Provide a type.",
        "body": "To fix the error, provide a type. All other properties on the object must be\nassignable to this type:\n\n```ts\ninterface A {\n  [a: string]: string;\n}\n```\n"
      }
    ]
  },
  {
    "code": 1022,
    "codeText": "TS1022",
    "title": "An index signature parameter must have a type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1024,
    "codeText": "TS1024",
    "title": "'readonly' modifier can only appear on a property declaration or index signature.",
    "category": "error",
    "documentation": "It is not possible to mark all properties as `readonly` by marking the container\nas `readonly`:\n\n```ts\nreadonly class A {\n  static x = 1;\n}\nreadonly const a = { a: 1 };\n```\n\n## See also\n\n- [TypeScript 3.4 release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/)\n- [`as const` proposal](https://github.com/Microsoft/TypeScript/issues/26979)\n",
    "fixes": [
      {
        "title": "Remove readonly keyword.",
        "body": "To fix the error, move the `readonly` declaration into the object for classes:\n\n```ts\nclass A {\n  static readonly x = 1;\n}\n```\n"
      },
      {
        "title": "Use const keyword.",
        "body": "For objects, you can use const assertions to deeply mark the object as read\nonly.\n\n```ts\nconst a = { a: 1 } as const;\n```\n"
      }
    ]
  },
  {
    "code": 1025,
    "codeText": "TS1025",
    "title": "An index signature cannot have a trailing comma.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1028,
    "codeText": "TS1028",
    "title": "Accessibility modifier already seen.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1029,
    "codeText": "TS1029",
    "title": "'{0}' modifier must precede '{1}' modifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1030,
    "codeText": "TS1030",
    "title": "'{0}' modifier already seen.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1031,
    "codeText": "TS1031",
    "title": "'{0}' modifier cannot appear on class elements of this kind.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1034,
    "codeText": "TS1034",
    "title": "'super' must be followed by an argument list or member access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1035,
    "codeText": "TS1035",
    "title": "Only ambient modules can use quoted names.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1036,
    "codeText": "TS1036",
    "title": "Statements are not allowed in ambient contexts.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1038,
    "codeText": "TS1038",
    "title": "A 'declare' modifier cannot be used in an already ambient context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1039,
    "codeText": "TS1039",
    "title": "Initializers are not allowed in ambient contexts.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1040,
    "codeText": "TS1040",
    "title": "'{0}' modifier cannot be used in an ambient context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1042,
    "codeText": "TS1042",
    "title": "'{0}' modifier cannot be used here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1044,
    "codeText": "TS1044",
    "title": "'{0}' modifier cannot appear on a module or namespace element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1046,
    "codeText": "TS1046",
    "title": "Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1047,
    "codeText": "TS1047",
    "title": "A rest parameter cannot be optional.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1048,
    "codeText": "TS1048",
    "title": "A rest parameter cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1049,
    "codeText": "TS1049",
    "title": "A 'set' accessor must have exactly one parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1051,
    "codeText": "TS1051",
    "title": "A 'set' accessor cannot have an optional parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1052,
    "codeText": "TS1052",
    "title": "A 'set' accessor parameter cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1053,
    "codeText": "TS1053",
    "title": "A 'set' accessor cannot have rest parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1054,
    "codeText": "TS1054",
    "title": "A 'get' accessor cannot have parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1055,
    "codeText": "TS1055",
    "title": "Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1056,
    "codeText": "TS1056",
    "title": "Accessors are only available when targeting ECMAScript 5 and higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1058,
    "codeText": "TS1058",
    "title": "The return type of an async function must either be a valid promise or must not contain a callable 'then' member.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1059,
    "codeText": "TS1059",
    "title": "A promise must have a 'then' method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1060,
    "codeText": "TS1060",
    "title": "The first parameter of the 'then' method of a promise must be a callback.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1061,
    "codeText": "TS1061",
    "title": "Enum member must have initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1062,
    "codeText": "TS1062",
    "title": "Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1063,
    "codeText": "TS1063",
    "title": "An export assignment cannot be used in a namespace.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1064,
    "codeText": "TS1064",
    "title": "The return type of an async function or method must be the global Promise<T> type. Did you mean to write 'Promise<{0}>'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1065,
    "codeText": "TS1065",
    "title": "The return type of an async function or method must be the global Promise<T> type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1066,
    "codeText": "TS1066",
    "title": "In ambient enum declarations member initializer must be constant expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1068,
    "codeText": "TS1068",
    "title": "Unexpected token. A constructor, method, accessor, or property was expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1069,
    "codeText": "TS1069",
    "title": "Unexpected token. A type parameter name was expected without curly braces.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1070,
    "codeText": "TS1070",
    "title": "'{0}' modifier cannot appear on a type member.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1071,
    "codeText": "TS1071",
    "title": "'{0}' modifier cannot appear on an index signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1079,
    "codeText": "TS1079",
    "title": "A '{0}' modifier cannot be used with an import declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1084,
    "codeText": "TS1084",
    "title": "Invalid 'reference' directive syntax.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1085,
    "codeText": "TS1085",
    "title": "Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1089,
    "codeText": "TS1089",
    "title": "'{0}' modifier cannot appear on a constructor declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1090,
    "codeText": "TS1090",
    "title": "'{0}' modifier cannot appear on a parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1091,
    "codeText": "TS1091",
    "title": "Only a single variable declaration is allowed in a 'for...in' statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1092,
    "codeText": "TS1092",
    "title": "Type parameters cannot appear on a constructor declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1093,
    "codeText": "TS1093",
    "title": "Type annotation cannot appear on a constructor declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1094,
    "codeText": "TS1094",
    "title": "An accessor cannot have type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1095,
    "codeText": "TS1095",
    "title": "A 'set' accessor cannot have a return type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1096,
    "codeText": "TS1096",
    "title": "An index signature must have exactly one parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1097,
    "codeText": "TS1097",
    "title": "'{0}' list cannot be empty.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1098,
    "codeText": "TS1098",
    "title": "Type parameter list cannot be empty.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1099,
    "codeText": "TS1099",
    "title": "Type argument list cannot be empty.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1100,
    "codeText": "TS1100",
    "title": "Invalid use of '{0}' in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1101,
    "codeText": "TS1101",
    "title": "'with' statements are not allowed in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1102,
    "codeText": "TS1102",
    "title": "'delete' cannot be called on an identifier in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1103,
    "codeText": "TS1103",
    "title": "'for await' loops are only allowed within async functions and at the top levels of modules.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1104,
    "codeText": "TS1104",
    "title": "A 'continue' statement can only be used within an enclosing iteration statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1105,
    "codeText": "TS1105",
    "title": "A 'break' statement can only be used within an enclosing iteration or switch statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1106,
    "codeText": "TS1106",
    "title": "The left-hand side of a 'for...of' statement may not be 'async'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1107,
    "codeText": "TS1107",
    "title": "Jump target cannot cross function boundary.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1108,
    "codeText": "TS1108",
    "title": "A 'return' statement can only be used within a function body.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1109,
    "codeText": "TS1109",
    "title": "Expression expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1110,
    "codeText": "TS1110",
    "title": "Type expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1111,
    "codeText": "TS1111",
    "title": "Private field '{0}' must be declared in an enclosing class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1113,
    "codeText": "TS1113",
    "title": "A 'default' clause cannot appear more than once in a 'switch' statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1114,
    "codeText": "TS1114",
    "title": "Duplicate label '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1115,
    "codeText": "TS1115",
    "title": "A 'continue' statement can only jump to a label of an enclosing iteration statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1116,
    "codeText": "TS1116",
    "title": "A 'break' statement can only jump to a label of an enclosing statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1117,
    "codeText": "TS1117",
    "title": "An object literal cannot have multiple properties with the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1118,
    "codeText": "TS1118",
    "title": "An object literal cannot have multiple get/set accessors with the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1119,
    "codeText": "TS1119",
    "title": "An object literal cannot have property and accessor with the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1120,
    "codeText": "TS1120",
    "title": "An export assignment cannot have modifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1121,
    "codeText": "TS1121",
    "title": "Octal literals are not allowed in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1123,
    "codeText": "TS1123",
    "title": "Variable declaration list cannot be empty.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1124,
    "codeText": "TS1124",
    "title": "Digit expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1125,
    "codeText": "TS1125",
    "title": "Hexadecimal digit expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1126,
    "codeText": "TS1126",
    "title": "Unexpected end of text.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1127,
    "codeText": "TS1127",
    "title": "Invalid character.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1128,
    "codeText": "TS1128",
    "title": "Declaration or statement expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1129,
    "codeText": "TS1129",
    "title": "Statement expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1130,
    "codeText": "TS1130",
    "title": "'case' or 'default' expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1131,
    "codeText": "TS1131",
    "title": "Property or signature expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1132,
    "codeText": "TS1132",
    "title": "Enum member expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1134,
    "codeText": "TS1134",
    "title": "Variable declaration expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1135,
    "codeText": "TS1135",
    "title": "Argument expression expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1136,
    "codeText": "TS1136",
    "title": "Property assignment expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1137,
    "codeText": "TS1137",
    "title": "Expression or comma expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1138,
    "codeText": "TS1138",
    "title": "Parameter declaration expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1139,
    "codeText": "TS1139",
    "title": "Type parameter declaration expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1140,
    "codeText": "TS1140",
    "title": "Type argument expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1141,
    "codeText": "TS1141",
    "title": "String literal expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1142,
    "codeText": "TS1142",
    "title": "Line break not permitted here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1144,
    "codeText": "TS1144",
    "title": "'{' or ';' expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1145,
    "codeText": "TS1145",
    "title": "'{' or JSX element expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1146,
    "codeText": "TS1146",
    "title": "Declaration expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1147,
    "codeText": "TS1147",
    "title": "Import declarations in a namespace cannot reference a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1148,
    "codeText": "TS1148",
    "title": "Cannot use imports, exports, or module augmentations when '--module' is 'none'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1149,
    "codeText": "TS1149",
    "title": "File name '{0}' differs from already included file name '{1}' only in casing.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1155,
    "codeText": "TS1155",
    "title": "'const' declarations must be initialized.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1156,
    "codeText": "TS1156",
    "title": "'const' declarations can only be declared inside a block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1157,
    "codeText": "TS1157",
    "title": "'let' declarations can only be declared inside a block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1160,
    "codeText": "TS1160",
    "title": "Unterminated template literal.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1161,
    "codeText": "TS1161",
    "title": "Unterminated regular expression literal.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1162,
    "codeText": "TS1162",
    "title": "An object member cannot be declared optional.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1163,
    "codeText": "TS1163",
    "title": "A 'yield' expression is only allowed in a generator body.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1164,
    "codeText": "TS1164",
    "title": "Computed property names are not allowed in enums.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1165,
    "codeText": "TS1165",
    "title": "A computed property name in an ambient context must refer to an expression whose type is a literal type or a 'unique symbol' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1166,
    "codeText": "TS1166",
    "title": "A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1168,
    "codeText": "TS1168",
    "title": "A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1169,
    "codeText": "TS1169",
    "title": "A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1170,
    "codeText": "TS1170",
    "title": "A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1171,
    "codeText": "TS1171",
    "title": "A comma expression is not allowed in a computed property name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1172,
    "codeText": "TS1172",
    "title": "'extends' clause already seen.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1173,
    "codeText": "TS1173",
    "title": "'extends' clause must precede 'implements' clause.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1174,
    "codeText": "TS1174",
    "title": "Classes can only extend a single class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1175,
    "codeText": "TS1175",
    "title": "'implements' clause already seen.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1176,
    "codeText": "TS1176",
    "title": "Interface declaration cannot have 'implements' clause.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1177,
    "codeText": "TS1177",
    "title": "Binary digit expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1178,
    "codeText": "TS1178",
    "title": "Octal digit expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1179,
    "codeText": "TS1179",
    "title": "Unexpected token. '{' expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1180,
    "codeText": "TS1180",
    "title": "Property destructuring pattern expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1181,
    "codeText": "TS1181",
    "title": "Array element destructuring pattern expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1182,
    "codeText": "TS1182",
    "title": "A destructuring declaration must have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1183,
    "codeText": "TS1183",
    "title": "An implementation cannot be declared in ambient contexts.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1184,
    "codeText": "TS1184",
    "title": "Modifiers cannot appear here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1185,
    "codeText": "TS1185",
    "title": "Merge conflict marker encountered.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1186,
    "codeText": "TS1186",
    "title": "A rest element cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1187,
    "codeText": "TS1187",
    "title": "A parameter property may not be declared using a binding pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1188,
    "codeText": "TS1188",
    "title": "Only a single variable declaration is allowed in a 'for...of' statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1189,
    "codeText": "TS1189",
    "title": "The variable declaration of a 'for...in' statement cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1190,
    "codeText": "TS1190",
    "title": "The variable declaration of a 'for...of' statement cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1191,
    "codeText": "TS1191",
    "title": "An import declaration cannot have modifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1192,
    "codeText": "TS1192",
    "title": "Module '{0}' has no default export.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1193,
    "codeText": "TS1193",
    "title": "An export declaration cannot have modifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1194,
    "codeText": "TS1194",
    "title": "Export declarations are not permitted in a namespace.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1195,
    "codeText": "TS1195",
    "title": "'export *' does not re-export a default.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1196,
    "codeText": "TS1196",
    "title": "Catch clause variable type annotation must be 'any' or 'unknown' if specified.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1197,
    "codeText": "TS1197",
    "title": "Catch clause variable cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1198,
    "codeText": "TS1198",
    "title": "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1199,
    "codeText": "TS1199",
    "title": "Unterminated Unicode escape sequence.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1200,
    "codeText": "TS1200",
    "title": "Line terminator not permitted before arrow.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1202,
    "codeText": "TS1202",
    "title": "Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1203,
    "codeText": "TS1203",
    "title": "Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1205,
    "codeText": "TS1205",
    "title": "Re-exporting a type when the '--isolatedModules' flag is provided requires using 'export type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1206,
    "codeText": "TS1206",
    "title": "Decorators are not valid here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1207,
    "codeText": "TS1207",
    "title": "Decorators cannot be applied to multiple get/set accessors of the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1208,
    "codeText": "TS1208",
    "title": "'{0}' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1209,
    "codeText": "TS1209",
    "title": "Invalid optional chain from new expression. Did you mean to call '{0}()'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1210,
    "codeText": "TS1210",
    "title": "Code contained in a class is evaluated in JavaScript's strict mode which does not allow this use of '{0}'. For more information, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1211,
    "codeText": "TS1211",
    "title": "A class declaration without the 'default' modifier must have a name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1212,
    "codeText": "TS1212",
    "title": "Identifier expected. '{0}' is a reserved word in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1213,
    "codeText": "TS1213",
    "title": "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1214,
    "codeText": "TS1214",
    "title": "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1215,
    "codeText": "TS1215",
    "title": "Invalid use of '{0}'. Modules are automatically in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1216,
    "codeText": "TS1216",
    "title": "Identifier expected. '__esModule' is reserved as an exported marker when transforming ECMAScript modules.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1218,
    "codeText": "TS1218",
    "title": "Export assignment is not supported when '--module' flag is 'system'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1219,
    "codeText": "TS1219",
    "title": "Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option in your 'tsconfig' or 'jsconfig' to remove this warning.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1221,
    "codeText": "TS1221",
    "title": "Generators are not allowed in an ambient context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1222,
    "codeText": "TS1222",
    "title": "An overload signature cannot be declared as a generator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1223,
    "codeText": "TS1223",
    "title": "'{0}' tag already specified.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1224,
    "codeText": "TS1224",
    "title": "Signature '{0}' must be a type predicate.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1225,
    "codeText": "TS1225",
    "title": "Cannot find parameter '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1226,
    "codeText": "TS1226",
    "title": "Type predicate '{0}' is not assignable to '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1227,
    "codeText": "TS1227",
    "title": "Parameter '{0}' is not in the same position as parameter '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1228,
    "codeText": "TS1228",
    "title": "A type predicate is only allowed in return type position for functions and methods.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1229,
    "codeText": "TS1229",
    "title": "A type predicate cannot reference a rest parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1230,
    "codeText": "TS1230",
    "title": "A type predicate cannot reference element '{0}' in a binding pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1231,
    "codeText": "TS1231",
    "title": "An export assignment must be at the top level of a file or module declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1232,
    "codeText": "TS1232",
    "title": "An import declaration can only be used at the top level of a namespace or module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1233,
    "codeText": "TS1233",
    "title": "An export declaration can only be used at the top level of a namespace or module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1234,
    "codeText": "TS1234",
    "title": "An ambient module declaration is only allowed at the top level in a file.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1235,
    "codeText": "TS1235",
    "title": "A namespace declaration is only allowed at the top level of a namespace or module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1236,
    "codeText": "TS1236",
    "title": "The return type of a property decorator function must be either 'void' or 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1237,
    "codeText": "TS1237",
    "title": "The return type of a parameter decorator function must be either 'void' or 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1238,
    "codeText": "TS1238",
    "title": "Unable to resolve signature of class decorator when called as an expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1239,
    "codeText": "TS1239",
    "title": "Unable to resolve signature of parameter decorator when called as an expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1240,
    "codeText": "TS1240",
    "title": "Unable to resolve signature of property decorator when called as an expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1241,
    "codeText": "TS1241",
    "title": "Unable to resolve signature of method decorator when called as an expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1242,
    "codeText": "TS1242",
    "title": "'abstract' modifier can only appear on a class, method, or property declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1243,
    "codeText": "TS1243",
    "title": "'{0}' modifier cannot be used with '{1}' modifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1244,
    "codeText": "TS1244",
    "title": "Abstract methods can only appear within an abstract class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1245,
    "codeText": "TS1245",
    "title": "Method '{0}' cannot have an implementation because it is marked abstract.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1246,
    "codeText": "TS1246",
    "title": "An interface property cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1247,
    "codeText": "TS1247",
    "title": "A type literal property cannot have an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1248,
    "codeText": "TS1248",
    "title": "A class member cannot have the '{0}' keyword.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1249,
    "codeText": "TS1249",
    "title": "A decorator can only decorate a method implementation, not an overload.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1250,
    "codeText": "TS1250",
    "title": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1251,
    "codeText": "TS1251",
    "title": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1252,
    "codeText": "TS1252",
    "title": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1253,
    "codeText": "TS1253",
    "title": "Abstract properties can only appear within an abstract class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1254,
    "codeText": "TS1254",
    "title": "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1255,
    "codeText": "TS1255",
    "title": "A definite assignment assertion '!' is not permitted in this context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1257,
    "codeText": "TS1257",
    "title": "A required element cannot follow an optional element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1258,
    "codeText": "TS1258",
    "title": "A default export must be at the top level of a file or module declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1259,
    "codeText": "TS1259",
    "title": "Module '{0}' can only be default-imported using the '{1}' flag",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1260,
    "codeText": "TS1260",
    "title": "Keywords cannot contain escape characters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1261,
    "codeText": "TS1261",
    "title": "Already included file name '{0}' differs from file name '{1}' only in casing.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1262,
    "codeText": "TS1262",
    "title": "Identifier expected. '{0}' is a reserved word at the top-level of a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1263,
    "codeText": "TS1263",
    "title": "Declarations with initializers cannot also have definite assignment assertions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1264,
    "codeText": "TS1264",
    "title": "Declarations with definite assignment assertions must also have type annotations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1265,
    "codeText": "TS1265",
    "title": "A rest element cannot follow another rest element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1266,
    "codeText": "TS1266",
    "title": "An optional element cannot follow a rest element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1267,
    "codeText": "TS1267",
    "title": "Property '{0}' cannot have an initializer because it is marked abstract.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1268,
    "codeText": "TS1268",
    "title": "An index signature parameter type must be 'string', 'number', 'symbol', or a template literal type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1269,
    "codeText": "TS1269",
    "title": "Cannot use 'export import' on a type or type-only namespace when the '--isolatedModules' flag is provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1270,
    "codeText": "TS1270",
    "title": "Decorator function return type '{0}' is not assignable to type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1271,
    "codeText": "TS1271",
    "title": "Decorator function return type is '{0}' but is expected to be 'void' or 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1272,
    "codeText": "TS1272",
    "title": "A type referenced in a decorated signature must be imported with 'import type' or a namespace import when 'isolatedModules' and 'emitDecoratorMetadata' are enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1273,
    "codeText": "TS1273",
    "title": "'{0}' modifier cannot appear on a type parameter",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1274,
    "codeText": "TS1274",
    "title": "'{0}' modifier can only appear on a type parameter of a class, interface or type alias",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1275,
    "codeText": "TS1275",
    "title": "'accessor' modifier can only appear on a property declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1276,
    "codeText": "TS1276",
    "title": "An 'accessor' property cannot be declared optional.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1277,
    "codeText": "TS1277",
    "title": "'{0}' modifier can only appear on a type parameter of a function, method or class",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1278,
    "codeText": "TS1278",
    "title": "The runtime will invoke the decorator with {1} arguments, but the decorator expects {0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1279,
    "codeText": "TS1279",
    "title": "The runtime will invoke the decorator with {1} arguments, but the decorator expects at least {0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1280,
    "codeText": "TS1280",
    "title": "Namespaces are not allowed in global script files when '{0}' is enabled. If this file is not intended to be a global script, set 'moduleDetection' to 'force' or add an empty 'export {}' statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1281,
    "codeText": "TS1281",
    "title": "Cannot access '{0}' from another file without qualification when '{1}' is enabled. Use '{2}' instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1282,
    "codeText": "TS1282",
    "title": "An 'export =' declaration must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1283,
    "codeText": "TS1283",
    "title": "An 'export =' declaration must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1284,
    "codeText": "TS1284",
    "title": "An 'export default' must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1285,
    "codeText": "TS1285",
    "title": "An 'export default' must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1286,
    "codeText": "TS1286",
    "title": "ESM syntax is not allowed in a CommonJS module when 'verbatimModuleSyntax' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1287,
    "codeText": "TS1287",
    "title": "A top-level 'export' modifier cannot be used on value declarations in a CommonJS module when 'verbatimModuleSyntax' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1288,
    "codeText": "TS1288",
    "title": "An import alias cannot resolve to a type or type-only declaration when 'verbatimModuleSyntax' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1300,
    "codeText": "TS1300",
    "title": "'with' statements are not allowed in an async function block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1308,
    "codeText": "TS1308",
    "title": "'await' expressions are only allowed within async functions and at the top levels of modules.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1309,
    "codeText": "TS1309",
    "title": "The current file is a CommonJS module and cannot use 'await' at the top level.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1312,
    "codeText": "TS1312",
    "title": "Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1313,
    "codeText": "TS1313",
    "title": "The body of an 'if' statement cannot be the empty statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1314,
    "codeText": "TS1314",
    "title": "Global module exports may only appear in module files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1315,
    "codeText": "TS1315",
    "title": "Global module exports may only appear in declaration files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1316,
    "codeText": "TS1316",
    "title": "Global module exports may only appear at top level.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1317,
    "codeText": "TS1317",
    "title": "A parameter property cannot be declared using a rest parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1318,
    "codeText": "TS1318",
    "title": "An abstract accessor cannot have an implementation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1319,
    "codeText": "TS1319",
    "title": "A default export can only be used in an ECMAScript-style module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1320,
    "codeText": "TS1320",
    "title": "Type of 'await' operand must either be a valid promise or must not contain a callable 'then' member.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1321,
    "codeText": "TS1321",
    "title": "Type of 'yield' operand in an async generator must either be a valid promise or must not contain a callable 'then' member.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1322,
    "codeText": "TS1322",
    "title": "Type of iterated elements of a 'yield*' operand must either be a valid promise or must not contain a callable 'then' member.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1323,
    "codeText": "TS1323",
    "title": "Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'es2022', 'esnext', 'commonjs', 'amd', 'system', 'umd', 'node16', or 'nodenext'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1324,
    "codeText": "TS1324",
    "title": "Dynamic imports only support a second argument when the '--module' option is set to 'esnext', 'node16', or 'nodenext'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1325,
    "codeText": "TS1325",
    "title": "Argument of dynamic import cannot be spread element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1326,
    "codeText": "TS1326",
    "title": "This use of 'import' is invalid. 'import()' calls can be written, but they must have parentheses and cannot have type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1327,
    "codeText": "TS1327",
    "title": "String literal with double quotes expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1328,
    "codeText": "TS1328",
    "title": "Property value can only be string literal, numeric literal, 'true', 'false', 'null', object literal or array literal.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1329,
    "codeText": "TS1329",
    "title": "'{0}' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@{0}()'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1330,
    "codeText": "TS1330",
    "title": "A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1331,
    "codeText": "TS1331",
    "title": "A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1332,
    "codeText": "TS1332",
    "title": "A variable whose type is a 'unique symbol' type must be 'const'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1333,
    "codeText": "TS1333",
    "title": "'unique symbol' types may not be used on a variable declaration with a binding name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1334,
    "codeText": "TS1334",
    "title": "'unique symbol' types are only allowed on variables in a variable statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1335,
    "codeText": "TS1335",
    "title": "'unique symbol' types are not allowed here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1337,
    "codeText": "TS1337",
    "title": "An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1338,
    "codeText": "TS1338",
    "title": "'infer' declarations are only permitted in the 'extends' clause of a conditional type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1339,
    "codeText": "TS1339",
    "title": "Module '{0}' does not refer to a value, but is used as a value here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1340,
    "codeText": "TS1340",
    "title": "Module '{0}' does not refer to a type, but is used as a type here. Did you mean 'typeof import('{0}')'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1341,
    "codeText": "TS1341",
    "title": "Class constructor may not be an accessor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1342,
    "codeText": "TS1342",
    "title": "Type arguments cannot be used here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1343,
    "codeText": "TS1343",
    "title": "The 'import.meta' meta-property is only allowed when the '--module' option is 'es2020', 'es2022', 'esnext', 'system', 'node16', or 'nodenext'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1344,
    "codeText": "TS1344",
    "title": "'A label is not allowed here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1345,
    "codeText": "TS1345",
    "title": "An expression of type 'void' cannot be tested for truthiness.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1346,
    "codeText": "TS1346",
    "title": "This parameter is not allowed with 'use strict' directive.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1347,
    "codeText": "TS1347",
    "title": "'use strict' directive cannot be used with non-simple parameter list.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1348,
    "codeText": "TS1348",
    "title": "Non-simple parameter declared here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1349,
    "codeText": "TS1349",
    "title": "'use strict' directive used here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1350,
    "codeText": "TS1350",
    "title": "Print the final configuration instead of building.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1351,
    "codeText": "TS1351",
    "title": "An identifier or keyword cannot immediately follow a numeric literal.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1352,
    "codeText": "TS1352",
    "title": "A bigint literal cannot use exponential notation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1353,
    "codeText": "TS1353",
    "title": "A bigint literal must be an integer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1354,
    "codeText": "TS1354",
    "title": "'readonly' type modifier is only permitted on array and tuple literal types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1355,
    "codeText": "TS1355",
    "title": "A 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1356,
    "codeText": "TS1356",
    "title": "Did you mean to mark this function as 'async'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1357,
    "codeText": "TS1357",
    "title": "An enum member name must be followed by a ',', '=', or '}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1358,
    "codeText": "TS1358",
    "title": "Tagged template expressions are not permitted in an optional chain.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1359,
    "codeText": "TS1359",
    "title": "Identifier expected. '{0}' is a reserved word that cannot be used here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1360,
    "codeText": "TS1360",
    "title": "Type '{0}' does not satisfy the expected type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1361,
    "codeText": "TS1361",
    "title": "'{0}' cannot be used as a value because it was imported using 'import type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1362,
    "codeText": "TS1362",
    "title": "'{0}' cannot be used as a value because it was exported using 'export type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1363,
    "codeText": "TS1363",
    "title": "A type-only import can specify a default import or named bindings, but not both.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1364,
    "codeText": "TS1364",
    "title": "Convert to type-only export",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1365,
    "codeText": "TS1365",
    "title": "Convert all re-exported types to type-only exports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1366,
    "codeText": "TS1366",
    "title": "Split into two separate import declarations",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1367,
    "codeText": "TS1367",
    "title": "Split all invalid type-only imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1368,
    "codeText": "TS1368",
    "title": "Class constructor may not be a generator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1369,
    "codeText": "TS1369",
    "title": "Did you mean '{0}'?",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1371,
    "codeText": "TS1371",
    "title": "This import is never used as a value and must use 'import type' because 'importsNotUsedAsValues' is set to 'error'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1373,
    "codeText": "TS1373",
    "title": "Convert to type-only import",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1374,
    "codeText": "TS1374",
    "title": "Convert all imports not used as a value to type-only imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1375,
    "codeText": "TS1375",
    "title": "'await' expressions are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1376,
    "codeText": "TS1376",
    "title": "'{0}' was imported here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1377,
    "codeText": "TS1377",
    "title": "'{0}' was exported here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1378,
    "codeText": "TS1378",
    "title": "Top-level 'await' expressions are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1379,
    "codeText": "TS1379",
    "title": "An import alias cannot reference a declaration that was exported using 'export type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1380,
    "codeText": "TS1380",
    "title": "An import alias cannot reference a declaration that was imported using 'import type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1381,
    "codeText": "TS1381",
    "title": "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1382,
    "codeText": "TS1382",
    "title": "Unexpected token. Did you mean `{'>'}` or `&gt;`?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1383,
    "codeText": "TS1383",
    "title": "Only named exports may use 'export type'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1385,
    "codeText": "TS1385",
    "title": "Function type notation must be parenthesized when used in a union type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1386,
    "codeText": "TS1386",
    "title": "Constructor type notation must be parenthesized when used in a union type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1387,
    "codeText": "TS1387",
    "title": "Function type notation must be parenthesized when used in an intersection type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1388,
    "codeText": "TS1388",
    "title": "Constructor type notation must be parenthesized when used in an intersection type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1389,
    "codeText": "TS1389",
    "title": "'{0}' is not allowed as a variable declaration name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1390,
    "codeText": "TS1390",
    "title": "'{0}' is not allowed as a parameter name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1392,
    "codeText": "TS1392",
    "title": "An import alias cannot use 'import type'",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1393,
    "codeText": "TS1393",
    "title": "Imported via {0} from file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1394,
    "codeText": "TS1394",
    "title": "Imported via {0} from file '{1}' with packageId '{2}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1395,
    "codeText": "TS1395",
    "title": "Imported via {0} from file '{1}' to import 'importHelpers' as specified in compilerOptions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1396,
    "codeText": "TS1396",
    "title": "Imported via {0} from file '{1}' with packageId '{2}' to import 'importHelpers' as specified in compilerOptions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1397,
    "codeText": "TS1397",
    "title": "Imported via {0} from file '{1}' to import 'jsx' and 'jsxs' factory functions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1398,
    "codeText": "TS1398",
    "title": "Imported via {0} from file '{1}' with packageId '{2}' to import 'jsx' and 'jsxs' factory functions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1399,
    "codeText": "TS1399",
    "title": "File is included via import here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1400,
    "codeText": "TS1400",
    "title": "Referenced via '{0}' from file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1401,
    "codeText": "TS1401",
    "title": "File is included via reference here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1402,
    "codeText": "TS1402",
    "title": "Type library referenced via '{0}' from file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1403,
    "codeText": "TS1403",
    "title": "Type library referenced via '{0}' from file '{1}' with packageId '{2}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1404,
    "codeText": "TS1404",
    "title": "File is included via type library reference here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1405,
    "codeText": "TS1405",
    "title": "Library referenced via '{0}' from file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1406,
    "codeText": "TS1406",
    "title": "File is included via library reference here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1407,
    "codeText": "TS1407",
    "title": "Matched by include pattern '{0}' in '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1408,
    "codeText": "TS1408",
    "title": "File is matched by include pattern specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1409,
    "codeText": "TS1409",
    "title": "Part of 'files' list in tsconfig.json",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1410,
    "codeText": "TS1410",
    "title": "File is matched by 'files' list specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1411,
    "codeText": "TS1411",
    "title": "Output from referenced project '{0}' included because '{1}' specified",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1412,
    "codeText": "TS1412",
    "title": "Output from referenced project '{0}' included because '--module' is specified as 'none'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1413,
    "codeText": "TS1413",
    "title": "File is output from referenced project specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1414,
    "codeText": "TS1414",
    "title": "Source from referenced project '{0}' included because '{1}' specified",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1415,
    "codeText": "TS1415",
    "title": "Source from referenced project '{0}' included because '--module' is specified as 'none'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1416,
    "codeText": "TS1416",
    "title": "File is source from referenced project specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1417,
    "codeText": "TS1417",
    "title": "Entry point of type library '{0}' specified in compilerOptions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1418,
    "codeText": "TS1418",
    "title": "Entry point of type library '{0}' specified in compilerOptions with packageId '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1419,
    "codeText": "TS1419",
    "title": "File is entry point of type library specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1420,
    "codeText": "TS1420",
    "title": "Entry point for implicit type library '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1421,
    "codeText": "TS1421",
    "title": "Entry point for implicit type library '{0}' with packageId '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1422,
    "codeText": "TS1422",
    "title": "Library '{0}' specified in compilerOptions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1423,
    "codeText": "TS1423",
    "title": "File is library specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1424,
    "codeText": "TS1424",
    "title": "Default library",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1425,
    "codeText": "TS1425",
    "title": "Default library for target '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1426,
    "codeText": "TS1426",
    "title": "File is default library for target specified here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1427,
    "codeText": "TS1427",
    "title": "Root file specified for compilation",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1428,
    "codeText": "TS1428",
    "title": "File is output of project reference source '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1429,
    "codeText": "TS1429",
    "title": "File redirects to file '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1430,
    "codeText": "TS1430",
    "title": "The file is in the program because:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1431,
    "codeText": "TS1431",
    "title": "'for await' loops are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1432,
    "codeText": "TS1432",
    "title": "Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1433,
    "codeText": "TS1433",
    "title": "Decorators may not be applied to 'this' parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1434,
    "codeText": "TS1434",
    "title": "Unexpected keyword or identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1435,
    "codeText": "TS1435",
    "title": "Unknown keyword or identifier. Did you mean '{0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1436,
    "codeText": "TS1436",
    "title": "Decorators must precede the name and all keywords of property declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1437,
    "codeText": "TS1437",
    "title": "Namespace must be given a name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1438,
    "codeText": "TS1438",
    "title": "Interface must be given a name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1439,
    "codeText": "TS1439",
    "title": "Type alias must be given a name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1440,
    "codeText": "TS1440",
    "title": "Variable declaration not allowed at this location.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1441,
    "codeText": "TS1441",
    "title": "Cannot start a function call in a type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1442,
    "codeText": "TS1442",
    "title": "Expected '=' for property initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1443,
    "codeText": "TS1443",
    "title": "Module declaration names may only use ' or \" quoted strings.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1444,
    "codeText": "TS1444",
    "title": "'{0}' is a type and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1446,
    "codeText": "TS1446",
    "title": "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1448,
    "codeText": "TS1448",
    "title": "'{0}' resolves to a type-only declaration and must be re-exported using a type-only re-export when 'isolatedModules' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1449,
    "codeText": "TS1449",
    "title": "Preserve unused imported values in the JavaScript output that would otherwise be removed.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1450,
    "codeText": "TS1450",
    "title": "Dynamic imports can only accept a module specifier and an optional assertion as arguments",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1451,
    "codeText": "TS1451",
    "title": "Private identifiers are only allowed in class bodies and may only be used as part of a class member declaration, property access, or on the left-hand-side of an 'in' expression",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1452,
    "codeText": "TS1452",
    "title": "'resolution-mode' assertions are only supported when `moduleResolution` is `node16` or `nodenext`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1453,
    "codeText": "TS1453",
    "title": "`resolution-mode` should be either `require` or `import`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1454,
    "codeText": "TS1454",
    "title": "`resolution-mode` can only be set for type-only imports.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1455,
    "codeText": "TS1455",
    "title": "`resolution-mode` is the only valid key for type import assertions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1456,
    "codeText": "TS1456",
    "title": "Type import assertions should have exactly one key - `resolution-mode` - with value `import` or `require`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1457,
    "codeText": "TS1457",
    "title": "Matched by default include pattern '**/*'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1458,
    "codeText": "TS1458",
    "title": "File is ECMAScript module because '{0}' has field \"type\" with value \"module\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1459,
    "codeText": "TS1459",
    "title": "File is CommonJS module because '{0}' has field \"type\" whose value is not \"module\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1460,
    "codeText": "TS1460",
    "title": "File is CommonJS module because '{0}' does not have field \"type\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1461,
    "codeText": "TS1461",
    "title": "File is CommonJS module because 'package.json' was not found",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1470,
    "codeText": "TS1470",
    "title": "The 'import.meta' meta-property is not allowed in files which will build into CommonJS output.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1471,
    "codeText": "TS1471",
    "title": "Module '{0}' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1472,
    "codeText": "TS1472",
    "title": "'catch' or 'finally' expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1473,
    "codeText": "TS1473",
    "title": "An import declaration can only be used at the top level of a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1474,
    "codeText": "TS1474",
    "title": "An export declaration can only be used at the top level of a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1475,
    "codeText": "TS1475",
    "title": "Control what method is used to detect module-format JS files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1476,
    "codeText": "TS1476",
    "title": "\"auto\": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1477,
    "codeText": "TS1477",
    "title": "An instantiation expression cannot be followed by a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1478,
    "codeText": "TS1478",
    "title": "Identifier or string literal expected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1479,
    "codeText": "TS1479",
    "title": "The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import(\"{0}\")' call instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1480,
    "codeText": "TS1480",
    "title": "To convert this file to an ECMAScript module, change its file extension to '{0}' or create a local package.json file with `{ \"type\": \"module\" }`.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1481,
    "codeText": "TS1481",
    "title": "To convert this file to an ECMAScript module, change its file extension to '{0}', or add the field `\"type\": \"module\"` to '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1482,
    "codeText": "TS1482",
    "title": "To convert this file to an ECMAScript module, add the field `\"type\": \"module\"` to '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1483,
    "codeText": "TS1483",
    "title": "To convert this file to an ECMAScript module, create a local package.json file with `{ \"type\": \"module\" }`.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 1484,
    "codeText": "TS1484",
    "title": "'{0}' is a type and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1485,
    "codeText": "TS1485",
    "title": "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1486,
    "codeText": "TS1486",
    "title": "Decorator used before 'export' here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1487,
    "codeText": "TS1487",
    "title": "Octal escape sequences are not allowed. Use the syntax '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1488,
    "codeText": "TS1488",
    "title": "Escape sequence '{0}' is not allowed.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1489,
    "codeText": "TS1489",
    "title": "Decimals with leading zeros are not allowed.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1490,
    "codeText": "TS1490",
    "title": "File appears to be binary.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1491,
    "codeText": "TS1491",
    "title": "'{0}' modifier cannot appear on a 'using' declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1492,
    "codeText": "TS1492",
    "title": "'{0}' declarations may not have binding patterns.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1493,
    "codeText": "TS1493",
    "title": "The left-hand side of a 'for...in' statement cannot be a 'using' declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1494,
    "codeText": "TS1494",
    "title": "The left-hand side of a 'for...in' statement cannot be an 'await using' declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 1495,
    "codeText": "TS1495",
    "title": "'{0}' modifier cannot appear on an 'await using' declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2200,
    "codeText": "TS2200",
    "title": "The types of '{0}' are incompatible between these types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2201,
    "codeText": "TS2201",
    "title": "The types returned by '{0}' are incompatible between these types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2202,
    "codeText": "TS2202",
    "title": "Call signature return types '{0}' and '{1}' are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2203,
    "codeText": "TS2203",
    "title": "Construct signature return types '{0}' and '{1}' are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2204,
    "codeText": "TS2204",
    "title": "Call signatures with no arguments have incompatible return types '{0}' and '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2205,
    "codeText": "TS2205",
    "title": "Construct signatures with no arguments have incompatible return types '{0}' and '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2206,
    "codeText": "TS2206",
    "title": "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2207,
    "codeText": "TS2207",
    "title": "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2208,
    "codeText": "TS2208",
    "title": "This type parameter might need an `extends {0}` constraint.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2209,
    "codeText": "TS2209",
    "title": "The project root is ambiguous, but is required to resolve export map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2210,
    "codeText": "TS2210",
    "title": "The project root is ambiguous, but is required to resolve import map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2211,
    "codeText": "TS2211",
    "title": "Add `extends` constraint.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 2212,
    "codeText": "TS2212",
    "title": "Add `extends` constraint to all type parameters",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 2300,
    "codeText": "TS2300",
    "title": "Duplicate identifier '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2301,
    "codeText": "TS2301",
    "title": "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2302,
    "codeText": "TS2302",
    "title": "Static members cannot reference class type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2303,
    "codeText": "TS2303",
    "title": "Circular definition of import alias '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2304,
    "codeText": "TS2304",
    "title": "Cannot find name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2305,
    "codeText": "TS2305",
    "title": "Module '{0}' has no exported member '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2306,
    "codeText": "TS2306",
    "title": "File '{0}' is not a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2307,
    "codeText": "TS2307",
    "title": "Cannot find module '{0}' or its corresponding type declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2308,
    "codeText": "TS2308",
    "title": "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2309,
    "codeText": "TS2309",
    "title": "An export assignment cannot be used in a module with other exported elements.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2310,
    "codeText": "TS2310",
    "title": "Type '{0}' recursively references itself as a base type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2311,
    "codeText": "TS2311",
    "title": "Cannot find name '{0}'. Did you mean to write this in an async function?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2312,
    "codeText": "TS2312",
    "title": "An interface can only extend an object type or intersection of object types with statically known members.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2313,
    "codeText": "TS2313",
    "title": "Type parameter '{0}' has a circular constraint.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2314,
    "codeText": "TS2314",
    "title": "Generic type '{0}' requires {1} type argument(s).",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2315,
    "codeText": "TS2315",
    "title": "Type '{0}' is not generic.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2316,
    "codeText": "TS2316",
    "title": "Global type '{0}' must be a class or interface type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2317,
    "codeText": "TS2317",
    "title": "Global type '{0}' must have {1} type parameter(s).",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2318,
    "codeText": "TS2318",
    "title": "Cannot find global type '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2319,
    "codeText": "TS2319",
    "title": "Named property '{0}' of types '{1}' and '{2}' are not identical.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2320,
    "codeText": "TS2320",
    "title": "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2321,
    "codeText": "TS2321",
    "title": "Excessive stack depth comparing types '{0}' and '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2322,
    "codeText": "TS2322",
    "title": "Type '{0}' is not assignable to type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2323,
    "codeText": "TS2323",
    "title": "Cannot redeclare exported variable '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2324,
    "codeText": "TS2324",
    "title": "Property '{0}' is missing in type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2325,
    "codeText": "TS2325",
    "title": "Property '{0}' is private in type '{1}' but not in type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2326,
    "codeText": "TS2326",
    "title": "Types of property '{0}' are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2327,
    "codeText": "TS2327",
    "title": "Property '{0}' is optional in type '{1}' but required in type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2328,
    "codeText": "TS2328",
    "title": "Types of parameters '{0}' and '{1}' are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2329,
    "codeText": "TS2329",
    "title": "Index signature for type '{0}' is missing in type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2330,
    "codeText": "TS2330",
    "title": "'{0}' and '{1}' index signatures are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2331,
    "codeText": "TS2331",
    "title": "'this' cannot be referenced in a module or namespace body.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2332,
    "codeText": "TS2332",
    "title": "'this' cannot be referenced in current location.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2333,
    "codeText": "TS2333",
    "title": "'this' cannot be referenced in constructor arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2334,
    "codeText": "TS2334",
    "title": "'this' cannot be referenced in a static property initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2335,
    "codeText": "TS2335",
    "title": "'super' can only be referenced in a derived class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2336,
    "codeText": "TS2336",
    "title": "'super' cannot be referenced in constructor arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2337,
    "codeText": "TS2337",
    "title": "Super calls are not permitted outside constructors or in nested functions inside constructors.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2338,
    "codeText": "TS2338",
    "title": "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2339,
    "codeText": "TS2339",
    "title": "Property '{0}' does not exist on type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2340,
    "codeText": "TS2340",
    "title": "Only public and protected methods of the base class are accessible via the 'super' keyword.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2341,
    "codeText": "TS2341",
    "title": "Property '{0}' is private and only accessible within class '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2343,
    "codeText": "TS2343",
    "title": "This syntax requires an imported helper named '{1}' which does not exist in '{0}'. Consider upgrading your version of '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2344,
    "codeText": "TS2344",
    "title": "Type '{0}' does not satisfy the constraint '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2345,
    "codeText": "TS2345",
    "title": "Argument of type '{0}' is not assignable to parameter of type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2346,
    "codeText": "TS2346",
    "title": "Call target does not contain any signatures.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2347,
    "codeText": "TS2347",
    "title": "Untyped function calls may not accept type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2348,
    "codeText": "TS2348",
    "title": "Value of type '{0}' is not callable. Did you mean to include 'new'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2349,
    "codeText": "TS2349",
    "title": "This expression is not callable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2350,
    "codeText": "TS2350",
    "title": "Only a void function can be called with the 'new' keyword.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2351,
    "codeText": "TS2351",
    "title": "This expression is not constructable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2352,
    "codeText": "TS2352",
    "title": "Conversion of type '{0}' to type '{1}' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2353,
    "codeText": "TS2353",
    "title": "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2354,
    "codeText": "TS2354",
    "title": "This syntax requires an imported helper but module '{0}' cannot be found.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2355,
    "codeText": "TS2355",
    "title": "A function whose declared type is neither 'void' nor 'any' must return a value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2356,
    "codeText": "TS2356",
    "title": "An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2357,
    "codeText": "TS2357",
    "title": "The operand of an increment or decrement operator must be a variable or a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2358,
    "codeText": "TS2358",
    "title": "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2359,
    "codeText": "TS2359",
    "title": "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2362,
    "codeText": "TS2362",
    "title": "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2363,
    "codeText": "TS2363",
    "title": "The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2364,
    "codeText": "TS2364",
    "title": "The left-hand side of an assignment expression must be a variable or a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2365,
    "codeText": "TS2365",
    "title": "Operator '{0}' cannot be applied to types '{1}' and '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2366,
    "codeText": "TS2366",
    "title": "Function lacks ending return statement and return type does not include 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2367,
    "codeText": "TS2367",
    "title": "This comparison appears to be unintentional because the types '{0}' and '{1}' have no overlap.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2368,
    "codeText": "TS2368",
    "title": "Type parameter name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2369,
    "codeText": "TS2369",
    "title": "A parameter property is only allowed in a constructor implementation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2370,
    "codeText": "TS2370",
    "title": "A rest parameter must be of an array type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2371,
    "codeText": "TS2371",
    "title": "A parameter initializer is only allowed in a function or constructor implementation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2372,
    "codeText": "TS2372",
    "title": "Parameter '{0}' cannot reference itself.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2373,
    "codeText": "TS2373",
    "title": "Parameter '{0}' cannot reference identifier '{1}' declared after it.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2374,
    "codeText": "TS2374",
    "title": "Duplicate index signature for type '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2375,
    "codeText": "TS2375",
    "title": "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2376,
    "codeText": "TS2376",
    "title": "A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2377,
    "codeText": "TS2377",
    "title": "Constructors for derived classes must contain a 'super' call.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2378,
    "codeText": "TS2378",
    "title": "A 'get' accessor must return a value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2379,
    "codeText": "TS2379",
    "title": "Argument of type '{0}' is not assignable to parameter of type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2380,
    "codeText": "TS2380",
    "title": "The return type of a 'get' accessor must be assignable to its 'set' accessor type",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2383,
    "codeText": "TS2383",
    "title": "Overload signatures must all be exported or non-exported.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2384,
    "codeText": "TS2384",
    "title": "Overload signatures must all be ambient or non-ambient.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2385,
    "codeText": "TS2385",
    "title": "Overload signatures must all be public, private or protected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2386,
    "codeText": "TS2386",
    "title": "Overload signatures must all be optional or required.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2387,
    "codeText": "TS2387",
    "title": "Function overload must be static.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2388,
    "codeText": "TS2388",
    "title": "Function overload must not be static.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2389,
    "codeText": "TS2389",
    "title": "Function implementation name must be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2390,
    "codeText": "TS2390",
    "title": "Constructor implementation is missing.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2391,
    "codeText": "TS2391",
    "title": "Function implementation is missing or not immediately following the declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2392,
    "codeText": "TS2392",
    "title": "Multiple constructor implementations are not allowed.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2393,
    "codeText": "TS2393",
    "title": "Duplicate function implementation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2394,
    "codeText": "TS2394",
    "title": "This overload signature is not compatible with its implementation signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2395,
    "codeText": "TS2395",
    "title": "Individual declarations in merged declaration '{0}' must be all exported or all local.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2396,
    "codeText": "TS2396",
    "title": "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2397,
    "codeText": "TS2397",
    "title": "Declaration name conflicts with built-in global identifier '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2398,
    "codeText": "TS2398",
    "title": "'constructor' cannot be used as a parameter property name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2399,
    "codeText": "TS2399",
    "title": "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2400,
    "codeText": "TS2400",
    "title": "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2401,
    "codeText": "TS2401",
    "title": "A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2402,
    "codeText": "TS2402",
    "title": "Expression resolves to '_super' that compiler uses to capture base class reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2403,
    "codeText": "TS2403",
    "title": "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2404,
    "codeText": "TS2404",
    "title": "The left-hand side of a 'for...in' statement cannot use a type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2405,
    "codeText": "TS2405",
    "title": "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2406,
    "codeText": "TS2406",
    "title": "The left-hand side of a 'for...in' statement must be a variable or a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2407,
    "codeText": "TS2407",
    "title": "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2408,
    "codeText": "TS2408",
    "title": "Setters cannot return a value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2409,
    "codeText": "TS2409",
    "title": "Return type of constructor signature must be assignable to the instance type of the class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2410,
    "codeText": "TS2410",
    "title": "The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2411,
    "codeText": "TS2411",
    "title": "Property '{0}' of type '{1}' is not assignable to '{2}' index type '{3}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2412,
    "codeText": "TS2412",
    "title": "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2413,
    "codeText": "TS2413",
    "title": "'{0}' index type '{1}' is not assignable to '{2}' index type '{3}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2414,
    "codeText": "TS2414",
    "title": "Class name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2415,
    "codeText": "TS2415",
    "title": "Class '{0}' incorrectly extends base class '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2416,
    "codeText": "TS2416",
    "title": "Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2417,
    "codeText": "TS2417",
    "title": "Class static side '{0}' incorrectly extends base class static side '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2418,
    "codeText": "TS2418",
    "title": "Type of computed property's value is '{0}', which is not assignable to type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2419,
    "codeText": "TS2419",
    "title": "Types of construct signatures are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2420,
    "codeText": "TS2420",
    "title": "Class '{0}' incorrectly implements interface '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2422,
    "codeText": "TS2422",
    "title": "A class can only implement an object type or intersection of object types with statically known members.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2423,
    "codeText": "TS2423",
    "title": "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2425,
    "codeText": "TS2425",
    "title": "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2426,
    "codeText": "TS2426",
    "title": "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2427,
    "codeText": "TS2427",
    "title": "Interface name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2428,
    "codeText": "TS2428",
    "title": "All declarations of '{0}' must have identical type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2430,
    "codeText": "TS2430",
    "title": "Interface '{0}' incorrectly extends interface '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2431,
    "codeText": "TS2431",
    "title": "Enum name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2432,
    "codeText": "TS2432",
    "title": "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2433,
    "codeText": "TS2433",
    "title": "A namespace declaration cannot be in a different file from a class or function with which it is merged.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2434,
    "codeText": "TS2434",
    "title": "A namespace declaration cannot be located prior to a class or function with which it is merged.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2435,
    "codeText": "TS2435",
    "title": "Ambient modules cannot be nested in other modules or namespaces.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2436,
    "codeText": "TS2436",
    "title": "Ambient module declaration cannot specify relative module name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2437,
    "codeText": "TS2437",
    "title": "Module '{0}' is hidden by a local declaration with the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2438,
    "codeText": "TS2438",
    "title": "Import name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2439,
    "codeText": "TS2439",
    "title": "Import or export declaration in an ambient module declaration cannot reference module through relative module name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2440,
    "codeText": "TS2440",
    "title": "Import declaration conflicts with local declaration of '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2441,
    "codeText": "TS2441",
    "title": "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2442,
    "codeText": "TS2442",
    "title": "Types have separate declarations of a private property '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2443,
    "codeText": "TS2443",
    "title": "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2444,
    "codeText": "TS2444",
    "title": "Property '{0}' is protected in type '{1}' but public in type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2445,
    "codeText": "TS2445",
    "title": "Property '{0}' is protected and only accessible within class '{1}' and its subclasses.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2446,
    "codeText": "TS2446",
    "title": "Property '{0}' is protected and only accessible through an instance of class '{1}'. This is an instance of class '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2447,
    "codeText": "TS2447",
    "title": "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2448,
    "codeText": "TS2448",
    "title": "Block-scoped variable '{0}' used before its declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2449,
    "codeText": "TS2449",
    "title": "Class '{0}' used before its declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2450,
    "codeText": "TS2450",
    "title": "Enum '{0}' used before its declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2451,
    "codeText": "TS2451",
    "title": "Cannot redeclare block-scoped variable '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2452,
    "codeText": "TS2452",
    "title": "An enum member cannot have a numeric name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2454,
    "codeText": "TS2454",
    "title": "Variable '{0}' is used before being assigned.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2456,
    "codeText": "TS2456",
    "title": "Type alias '{0}' circularly references itself.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2457,
    "codeText": "TS2457",
    "title": "Type alias name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2458,
    "codeText": "TS2458",
    "title": "An AMD module cannot have multiple name assignments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2459,
    "codeText": "TS2459",
    "title": "Module '{0}' declares '{1}' locally, but it is not exported.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2460,
    "codeText": "TS2460",
    "title": "Module '{0}' declares '{1}' locally, but it is exported as '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2461,
    "codeText": "TS2461",
    "title": "Type '{0}' is not an array type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2462,
    "codeText": "TS2462",
    "title": "A rest element must be last in a destructuring pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2463,
    "codeText": "TS2463",
    "title": "A binding pattern parameter cannot be optional in an implementation signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2464,
    "codeText": "TS2464",
    "title": "A computed property name must be of type 'string', 'number', 'symbol', or 'any'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2465,
    "codeText": "TS2465",
    "title": "'this' cannot be referenced in a computed property name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2466,
    "codeText": "TS2466",
    "title": "'super' cannot be referenced in a computed property name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2467,
    "codeText": "TS2467",
    "title": "A computed property name cannot reference a type parameter from its containing type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2468,
    "codeText": "TS2468",
    "title": "Cannot find global value '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2469,
    "codeText": "TS2469",
    "title": "The '{0}' operator cannot be applied to type 'symbol'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2472,
    "codeText": "TS2472",
    "title": "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2473,
    "codeText": "TS2473",
    "title": "Enum declarations must all be const or non-const.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2474,
    "codeText": "TS2474",
    "title": "const enum member initializers must be constant expressions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2475,
    "codeText": "TS2475",
    "title": "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment or type query.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2476,
    "codeText": "TS2476",
    "title": "A const enum member can only be accessed using a string literal.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2477,
    "codeText": "TS2477",
    "title": "'const' enum member initializer was evaluated to a non-finite value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2478,
    "codeText": "TS2478",
    "title": "'const' enum member initializer was evaluated to disallowed value 'NaN'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2480,
    "codeText": "TS2480",
    "title": "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2481,
    "codeText": "TS2481",
    "title": "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2483,
    "codeText": "TS2483",
    "title": "The left-hand side of a 'for...of' statement cannot use a type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2484,
    "codeText": "TS2484",
    "title": "Export declaration conflicts with exported declaration of '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2487,
    "codeText": "TS2487",
    "title": "The left-hand side of a 'for...of' statement must be a variable or a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2488,
    "codeText": "TS2488",
    "title": "Type '{0}' must have a '[Symbol.iterator]()' method that returns an iterator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2489,
    "codeText": "TS2489",
    "title": "An iterator must have a 'next()' method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2490,
    "codeText": "TS2490",
    "title": "The type returned by the '{0}()' method of an iterator must have a 'value' property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2491,
    "codeText": "TS2491",
    "title": "The left-hand side of a 'for...in' statement cannot be a destructuring pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2492,
    "codeText": "TS2492",
    "title": "Cannot redeclare identifier '{0}' in catch clause.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2493,
    "codeText": "TS2493",
    "title": "Tuple type '{0}' of length '{1}' has no element at index '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2494,
    "codeText": "TS2494",
    "title": "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2495,
    "codeText": "TS2495",
    "title": "Type '{0}' is not an array type or a string type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2496,
    "codeText": "TS2496",
    "title": "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2497,
    "codeText": "TS2497",
    "title": "This module can only be referenced with ECMAScript imports/exports by turning on the '{0}' flag and referencing its default export.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2498,
    "codeText": "TS2498",
    "title": "Module '{0}' uses 'export =' and cannot be used with 'export *'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2499,
    "codeText": "TS2499",
    "title": "An interface can only extend an identifier/qualified-name with optional type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2500,
    "codeText": "TS2500",
    "title": "A class can only implement an identifier/qualified-name with optional type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2501,
    "codeText": "TS2501",
    "title": "A rest element cannot contain a binding pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2502,
    "codeText": "TS2502",
    "title": "'{0}' is referenced directly or indirectly in its own type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2503,
    "codeText": "TS2503",
    "title": "Cannot find namespace '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2504,
    "codeText": "TS2504",
    "title": "Type '{0}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2505,
    "codeText": "TS2505",
    "title": "A generator cannot have a 'void' type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2506,
    "codeText": "TS2506",
    "title": "'{0}' is referenced directly or indirectly in its own base expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2507,
    "codeText": "TS2507",
    "title": "Type '{0}' is not a constructor function type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2508,
    "codeText": "TS2508",
    "title": "No base constructor has the specified number of type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2509,
    "codeText": "TS2509",
    "title": "Base constructor return type '{0}' is not an object type or intersection of object types with statically known members.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2510,
    "codeText": "TS2510",
    "title": "Base constructors must all have the same return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2511,
    "codeText": "TS2511",
    "title": "Cannot create an instance of an abstract class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2512,
    "codeText": "TS2512",
    "title": "Overload signatures must all be abstract or non-abstract.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2513,
    "codeText": "TS2513",
    "title": "Abstract method '{0}' in class '{1}' cannot be accessed via super expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2514,
    "codeText": "TS2514",
    "title": "A tuple type cannot be indexed with a negative value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2515,
    "codeText": "TS2515",
    "title": "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2516,
    "codeText": "TS2516",
    "title": "All declarations of an abstract method must be consecutive.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2517,
    "codeText": "TS2517",
    "title": "Cannot assign an abstract constructor type to a non-abstract constructor type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2518,
    "codeText": "TS2518",
    "title": "A 'this'-based type guard is not compatible with a parameter-based type guard.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2519,
    "codeText": "TS2519",
    "title": "An async iterator must have a 'next()' method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2520,
    "codeText": "TS2520",
    "title": "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2522,
    "codeText": "TS2522",
    "title": "The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2523,
    "codeText": "TS2523",
    "title": "'yield' expressions cannot be used in a parameter initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2524,
    "codeText": "TS2524",
    "title": "'await' expressions cannot be used in a parameter initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2525,
    "codeText": "TS2525",
    "title": "Initializer provides no value for this binding element and the binding element has no default value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2526,
    "codeText": "TS2526",
    "title": "A 'this' type is available only in a non-static member of a class or interface.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2527,
    "codeText": "TS2527",
    "title": "The inferred type of '{0}' references an inaccessible '{1}' type. A type annotation is necessary.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2528,
    "codeText": "TS2528",
    "title": "A module cannot have multiple default exports.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2529,
    "codeText": "TS2529",
    "title": "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2530,
    "codeText": "TS2530",
    "title": "Property '{0}' is incompatible with index signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2531,
    "codeText": "TS2531",
    "title": "Object is possibly 'null'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2532,
    "codeText": "TS2532",
    "title": "Object is possibly 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2533,
    "codeText": "TS2533",
    "title": "Object is possibly 'null' or 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2534,
    "codeText": "TS2534",
    "title": "A function returning 'never' cannot have a reachable end point.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2536,
    "codeText": "TS2536",
    "title": "Type '{0}' cannot be used to index type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2537,
    "codeText": "TS2537",
    "title": "Type '{0}' has no matching index signature for type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2538,
    "codeText": "TS2538",
    "title": "Type '{0}' cannot be used as an index type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2539,
    "codeText": "TS2539",
    "title": "Cannot assign to '{0}' because it is not a variable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2540,
    "codeText": "TS2540",
    "title": "Cannot assign to '{0}' because it is a read-only property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2542,
    "codeText": "TS2542",
    "title": "Index signature in type '{0}' only permits reading.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2543,
    "codeText": "TS2543",
    "title": "Duplicate identifier '_newTarget'. Compiler uses variable declaration '_newTarget' to capture 'new.target' meta-property reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2544,
    "codeText": "TS2544",
    "title": "Expression resolves to variable declaration '_newTarget' that compiler uses to capture 'new.target' meta-property reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2545,
    "codeText": "TS2545",
    "title": "A mixin class must have a constructor with a single rest parameter of type 'any[]'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2547,
    "codeText": "TS2547",
    "title": "The type returned by the '{0}()' method of an async iterator must be a promise for a type with a 'value' property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2548,
    "codeText": "TS2548",
    "title": "Type '{0}' is not an array type or does not have a '[Symbol.iterator]()' method that returns an iterator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2549,
    "codeText": "TS2549",
    "title": "Type '{0}' is not an array type or a string type or does not have a '[Symbol.iterator]()' method that returns an iterator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2550,
    "codeText": "TS2550",
    "title": "Property '{0}' does not exist on type '{1}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{2}' or later.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2551,
    "codeText": "TS2551",
    "title": "Property '{0}' does not exist on type '{1}'. Did you mean '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2552,
    "codeText": "TS2552",
    "title": "Cannot find name '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2553,
    "codeText": "TS2553",
    "title": "Computed values are not permitted in an enum with string valued members.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2554,
    "codeText": "TS2554",
    "title": "Expected {0} arguments, but got {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2555,
    "codeText": "TS2555",
    "title": "Expected at least {0} arguments, but got {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2556,
    "codeText": "TS2556",
    "title": "A spread argument must either have a tuple type or be passed to a rest parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2558,
    "codeText": "TS2558",
    "title": "Expected {0} type arguments, but got {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2559,
    "codeText": "TS2559",
    "title": "Type '{0}' has no properties in common with type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2560,
    "codeText": "TS2560",
    "title": "Value of type '{0}' has no properties in common with type '{1}'. Did you mean to call it?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2561,
    "codeText": "TS2561",
    "title": "Object literal may only specify known properties, but '{0}' does not exist in type '{1}'. Did you mean to write '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2562,
    "codeText": "TS2562",
    "title": "Base class expressions cannot reference class type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2563,
    "codeText": "TS2563",
    "title": "The containing function or module body is too large for control flow analysis.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2564,
    "codeText": "TS2564",
    "title": "Property '{0}' has no initializer and is not definitely assigned in the constructor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2565,
    "codeText": "TS2565",
    "title": "Property '{0}' is used before being assigned.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2566,
    "codeText": "TS2566",
    "title": "A rest element cannot have a property name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2567,
    "codeText": "TS2567",
    "title": "Enum declarations can only merge with namespace or other enum declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2568,
    "codeText": "TS2568",
    "title": "Property '{0}' may not exist on type '{1}'. Did you mean '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2570,
    "codeText": "TS2570",
    "title": "Could not find name '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2571,
    "codeText": "TS2571",
    "title": "Object is of type 'unknown'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2574,
    "codeText": "TS2574",
    "title": "A rest element type must be an array type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2575,
    "codeText": "TS2575",
    "title": "No overload expects {0} arguments, but overloads do exist that expect either {1} or {2} arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2576,
    "codeText": "TS2576",
    "title": "Property '{0}' does not exist on type '{1}'. Did you mean to access the static member '{2}' instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2577,
    "codeText": "TS2577",
    "title": "Return type annotation circularly references itself.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2578,
    "codeText": "TS2578",
    "title": "Unused '@ts-expect-error' directive.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2580,
    "codeText": "TS2580",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2581,
    "codeText": "TS2581",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2582,
    "codeText": "TS2582",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2583,
    "codeText": "TS2583",
    "title": "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{1}' or later.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2584,
    "codeText": "TS2584",
    "title": "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to include 'dom'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2585,
    "codeText": "TS2585",
    "title": "'{0}' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the 'lib' compiler option to es2015 or later.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2588,
    "codeText": "TS2588",
    "title": "Cannot assign to '{0}' because it is a constant.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2589,
    "codeText": "TS2589",
    "title": "Type instantiation is excessively deep and possibly infinite.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2590,
    "codeText": "TS2590",
    "title": "Expression produces a union type that is too complex to represent.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2591,
    "codeText": "TS2591",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node` and then add 'node' to the types field in your tsconfig.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2592,
    "codeText": "TS2592",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery` and then add 'jquery' to the types field in your tsconfig.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2593,
    "codeText": "TS2593",
    "title": "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha` and then add 'jest' or 'mocha' to the types field in your tsconfig.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2594,
    "codeText": "TS2594",
    "title": "This module is declared with 'export =', and can only be used with a default import when using the '{0}' flag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2595,
    "codeText": "TS2595",
    "title": "'{0}' can only be imported by using a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2596,
    "codeText": "TS2596",
    "title": "'{0}' can only be imported by turning on the 'esModuleInterop' flag and using a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2597,
    "codeText": "TS2597",
    "title": "'{0}' can only be imported by using a 'require' call or by using a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2598,
    "codeText": "TS2598",
    "title": "'{0}' can only be imported by using a 'require' call or by turning on the 'esModuleInterop' flag and using a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2602,
    "codeText": "TS2602",
    "title": "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2603,
    "codeText": "TS2603",
    "title": "Property '{0}' in type '{1}' is not assignable to type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2604,
    "codeText": "TS2604",
    "title": "JSX element type '{0}' does not have any construct or call signatures.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2606,
    "codeText": "TS2606",
    "title": "Property '{0}' of JSX spread attribute is not assignable to target property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2607,
    "codeText": "TS2607",
    "title": "JSX element class does not support attributes because it does not have a '{0}' property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2608,
    "codeText": "TS2608",
    "title": "The global type 'JSX.{0}' may not have more than one property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2609,
    "codeText": "TS2609",
    "title": "JSX spread child must be an array type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2610,
    "codeText": "TS2610",
    "title": "'{0}' is defined as an accessor in class '{1}', but is overridden here in '{2}' as an instance property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2611,
    "codeText": "TS2611",
    "title": "'{0}' is defined as a property in class '{1}', but is overridden here in '{2}' as an accessor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2612,
    "codeText": "TS2612",
    "title": "Property '{0}' will overwrite the base property in '{1}'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2613,
    "codeText": "TS2613",
    "title": "Module '{0}' has no default export. Did you mean to use 'import { {1} } from {0}' instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2614,
    "codeText": "TS2614",
    "title": "Module '{0}' has no exported member '{1}'. Did you mean to use 'import {1} from {0}' instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2615,
    "codeText": "TS2615",
    "title": "Type of property '{0}' circularly references itself in mapped type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2616,
    "codeText": "TS2616",
    "title": "'{0}' can only be imported by using 'import {1} = require({2})' or a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2617,
    "codeText": "TS2617",
    "title": "'{0}' can only be imported by using 'import {1} = require({2})' or by turning on the 'esModuleInterop' flag and using a default import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2618,
    "codeText": "TS2618",
    "title": "Source has {0} element(s) but target requires {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2619,
    "codeText": "TS2619",
    "title": "Source has {0} element(s) but target allows only {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2620,
    "codeText": "TS2620",
    "title": "Target requires {0} element(s) but source may have fewer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2621,
    "codeText": "TS2621",
    "title": "Target allows only {0} element(s) but source may have more.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2623,
    "codeText": "TS2623",
    "title": "Source provides no match for required element at position {0} in target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2624,
    "codeText": "TS2624",
    "title": "Source provides no match for variadic element at position {0} in target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2625,
    "codeText": "TS2625",
    "title": "Variadic element at position {0} in source does not match element at position {1} in target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2626,
    "codeText": "TS2626",
    "title": "Type at position {0} in source is not compatible with type at position {1} in target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2627,
    "codeText": "TS2627",
    "title": "Type at positions {0} through {1} in source is not compatible with type at position {2} in target.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2628,
    "codeText": "TS2628",
    "title": "Cannot assign to '{0}' because it is an enum.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2629,
    "codeText": "TS2629",
    "title": "Cannot assign to '{0}' because it is a class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2630,
    "codeText": "TS2630",
    "title": "Cannot assign to '{0}' because it is a function.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2631,
    "codeText": "TS2631",
    "title": "Cannot assign to '{0}' because it is a namespace.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2632,
    "codeText": "TS2632",
    "title": "Cannot assign to '{0}' because it is an import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2633,
    "codeText": "TS2633",
    "title": "JSX property access expressions cannot include JSX namespace names",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2634,
    "codeText": "TS2634",
    "title": "'{0}' index signatures are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2635,
    "codeText": "TS2635",
    "title": "Type '{0}' has no signatures for which the type argument list is applicable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2636,
    "codeText": "TS2636",
    "title": "Type '{0}' is not assignable to type '{1}' as implied by variance annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2637,
    "codeText": "TS2637",
    "title": "Variance annotations are only supported in type aliases for object, function, constructor, and mapped types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2638,
    "codeText": "TS2638",
    "title": "Type '{0}' may represent a primitive value, which is not permitted as the right operand of the 'in' operator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2639,
    "codeText": "TS2639",
    "title": "React components cannot include JSX namespace names",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2649,
    "codeText": "TS2649",
    "title": "Cannot augment module '{0}' with value exports because it resolves to a non-module entity.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2651,
    "codeText": "TS2651",
    "title": "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2652,
    "codeText": "TS2652",
    "title": "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2653,
    "codeText": "TS2653",
    "title": "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2657,
    "codeText": "TS2657",
    "title": "JSX expressions must have one parent element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2658,
    "codeText": "TS2658",
    "title": "Type '{0}' provides no match for the signature '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2659,
    "codeText": "TS2659",
    "title": "'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2660,
    "codeText": "TS2660",
    "title": "'super' can only be referenced in members of derived classes or object literal expressions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2661,
    "codeText": "TS2661",
    "title": "Cannot export '{0}'. Only local declarations can be exported from a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2662,
    "codeText": "TS2662",
    "title": "Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2663,
    "codeText": "TS2663",
    "title": "Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2664,
    "codeText": "TS2664",
    "title": "Invalid module name in augmentation, module '{0}' cannot be found.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2665,
    "codeText": "TS2665",
    "title": "Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2666,
    "codeText": "TS2666",
    "title": "Exports and export assignments are not permitted in module augmentations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2667,
    "codeText": "TS2667",
    "title": "Imports are not permitted in module augmentations. Consider moving them to the enclosing external module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2668,
    "codeText": "TS2668",
    "title": "'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2669,
    "codeText": "TS2669",
    "title": "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2670,
    "codeText": "TS2670",
    "title": "Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2671,
    "codeText": "TS2671",
    "title": "Cannot augment module '{0}' because it resolves to a non-module entity.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2672,
    "codeText": "TS2672",
    "title": "Cannot assign a '{0}' constructor type to a '{1}' constructor type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2673,
    "codeText": "TS2673",
    "title": "Constructor of class '{0}' is private and only accessible within the class declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2674,
    "codeText": "TS2674",
    "title": "Constructor of class '{0}' is protected and only accessible within the class declaration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2675,
    "codeText": "TS2675",
    "title": "Cannot extend a class '{0}'. Class constructor is marked as private.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2676,
    "codeText": "TS2676",
    "title": "Accessors must both be abstract or non-abstract.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2677,
    "codeText": "TS2677",
    "title": "A type predicate's type must be assignable to its parameter's type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2678,
    "codeText": "TS2678",
    "title": "Type '{0}' is not comparable to type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2679,
    "codeText": "TS2679",
    "title": "A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2680,
    "codeText": "TS2680",
    "title": "A '{0}' parameter must be the first parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2681,
    "codeText": "TS2681",
    "title": "A constructor cannot have a 'this' parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2683,
    "codeText": "TS2683",
    "title": "'this' implicitly has type 'any' because it does not have a type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2684,
    "codeText": "TS2684",
    "title": "The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2685,
    "codeText": "TS2685",
    "title": "The 'this' types of each signature are incompatible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2686,
    "codeText": "TS2686",
    "title": "'{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2687,
    "codeText": "TS2687",
    "title": "All declarations of '{0}' must have identical modifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2688,
    "codeText": "TS2688",
    "title": "Cannot find type definition file for '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2689,
    "codeText": "TS2689",
    "title": "Cannot extend an interface '{0}'. Did you mean 'implements'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2690,
    "codeText": "TS2690",
    "title": "'{0}' only refers to a type, but is being used as a value here. Did you mean to use '{1} in {0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2691,
    "codeText": "TS2691",
    "title": "An import path cannot end with a '{0}' extension. Consider importing '{1}' instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2692,
    "codeText": "TS2692",
    "title": "'{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2693,
    "codeText": "TS2693",
    "title": "'{0}' only refers to a type, but is being used as a value here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2694,
    "codeText": "TS2694",
    "title": "Namespace '{0}' has no exported member '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2695,
    "codeText": "TS2695",
    "title": "Left side of comma operator is unused and has no side effects.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2696,
    "codeText": "TS2696",
    "title": "The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2697,
    "codeText": "TS2697",
    "title": "An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2698,
    "codeText": "TS2698",
    "title": "Spread types may only be created from object types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2699,
    "codeText": "TS2699",
    "title": "Static property '{0}' conflicts with built-in property 'Function.{0}' of constructor function '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2700,
    "codeText": "TS2700",
    "title": "Rest types may only be created from object types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2701,
    "codeText": "TS2701",
    "title": "The target of an object rest assignment must be a variable or a property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2702,
    "codeText": "TS2702",
    "title": "'{0}' only refers to a type, but is being used as a namespace here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2703,
    "codeText": "TS2703",
    "title": "The operand of a 'delete' operator must be a property reference.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2704,
    "codeText": "TS2704",
    "title": "The operand of a 'delete' operator cannot be a read-only property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2705,
    "codeText": "TS2705",
    "title": "An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2706,
    "codeText": "TS2706",
    "title": "Required type parameters may not follow optional type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2707,
    "codeText": "TS2707",
    "title": "Generic type '{0}' requires between {1} and {2} type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2708,
    "codeText": "TS2708",
    "title": "Cannot use namespace '{0}' as a value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2709,
    "codeText": "TS2709",
    "title": "Cannot use namespace '{0}' as a type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2710,
    "codeText": "TS2710",
    "title": "'{0}' are specified twice. The attribute named '{0}' will be overwritten.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2711,
    "codeText": "TS2711",
    "title": "A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2712,
    "codeText": "TS2712",
    "title": "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2713,
    "codeText": "TS2713",
    "title": "Cannot access '{0}.{1}' because '{0}' is a type, but not a namespace. Did you mean to retrieve the type of the property '{1}' in '{0}' with '{0}[\"{1}\"]'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2714,
    "codeText": "TS2714",
    "title": "The expression of an export assignment must be an identifier or qualified name in an ambient context.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2715,
    "codeText": "TS2715",
    "title": "Abstract property '{0}' in class '{1}' cannot be accessed in the constructor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2716,
    "codeText": "TS2716",
    "title": "Type parameter '{0}' has a circular default.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2717,
    "codeText": "TS2717",
    "title": "Subsequent property declarations must have the same type.  Property '{0}' must be of type '{1}', but here has type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2718,
    "codeText": "TS2718",
    "title": "Duplicate property '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2719,
    "codeText": "TS2719",
    "title": "Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2720,
    "codeText": "TS2720",
    "title": "Class '{0}' incorrectly implements class '{1}'. Did you mean to extend '{1}' and inherit its members as a subclass?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2721,
    "codeText": "TS2721",
    "title": "Cannot invoke an object which is possibly 'null'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2722,
    "codeText": "TS2722",
    "title": "Cannot invoke an object which is possibly 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2723,
    "codeText": "TS2723",
    "title": "Cannot invoke an object which is possibly 'null' or 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2724,
    "codeText": "TS2724",
    "title": "'{0}' has no exported member named '{1}'. Did you mean '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2725,
    "codeText": "TS2725",
    "title": "Class name cannot be 'Object' when targeting ES5 with module {0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2726,
    "codeText": "TS2726",
    "title": "Cannot find lib definition for '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2727,
    "codeText": "TS2727",
    "title": "Cannot find lib definition for '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2728,
    "codeText": "TS2728",
    "title": "'{0}' is declared here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 2729,
    "codeText": "TS2729",
    "title": "Property '{0}' is used before its initialization.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2730,
    "codeText": "TS2730",
    "title": "An arrow function cannot have a 'this' parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2731,
    "codeText": "TS2731",
    "title": "Implicit conversion of a 'symbol' to a 'string' will fail at runtime. Consider wrapping this expression in 'String(...)'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2732,
    "codeText": "TS2732",
    "title": "Cannot find module '{0}'. Consider using '--resolveJsonModule' to import module with '.json' extension.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2733,
    "codeText": "TS2733",
    "title": "Property '{0}' was also declared here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2734,
    "codeText": "TS2734",
    "title": "Are you missing a semicolon?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2735,
    "codeText": "TS2735",
    "title": "Did you mean for '{0}' to be constrained to type 'new (...args: any[]) => {1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2736,
    "codeText": "TS2736",
    "title": "Operator '{0}' cannot be applied to type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2737,
    "codeText": "TS2737",
    "title": "BigInt literals are not available when targeting lower than ES2020.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2738,
    "codeText": "TS2738",
    "title": "An outer value of 'this' is shadowed by this container.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 2739,
    "codeText": "TS2739",
    "title": "Type '{0}' is missing the following properties from type '{1}': {2}",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2740,
    "codeText": "TS2740",
    "title": "Type '{0}' is missing the following properties from type '{1}': {2}, and {3} more.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2741,
    "codeText": "TS2741",
    "title": "Property '{0}' is missing in type '{1}' but required in type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2742,
    "codeText": "TS2742",
    "title": "The inferred type of '{0}' cannot be named without a reference to '{1}'. This is likely not portable. A type annotation is necessary.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2743,
    "codeText": "TS2743",
    "title": "No overload expects {0} type arguments, but overloads do exist that expect either {1} or {2} type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2744,
    "codeText": "TS2744",
    "title": "Type parameter defaults can only reference previously declared type parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2745,
    "codeText": "TS2745",
    "title": "This JSX tag's '{0}' prop expects type '{1}' which requires multiple children, but only a single child was provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2746,
    "codeText": "TS2746",
    "title": "This JSX tag's '{0}' prop expects a single child of type '{1}', but multiple children were provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2747,
    "codeText": "TS2747",
    "title": "'{0}' components don't accept text as child elements. Text in JSX has the type 'string', but the expected type of '{1}' is '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2748,
    "codeText": "TS2748",
    "title": "Cannot access ambient const enums when the '--isolatedModules' flag is provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2749,
    "codeText": "TS2749",
    "title": "'{0}' refers to a value, but is being used as a type here. Did you mean 'typeof {0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2750,
    "codeText": "TS2750",
    "title": "The implementation signature is declared here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2751,
    "codeText": "TS2751",
    "title": "Circularity originates in type at this location.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2752,
    "codeText": "TS2752",
    "title": "The first export default is here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2753,
    "codeText": "TS2753",
    "title": "Another export default is here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2754,
    "codeText": "TS2754",
    "title": "'super' may not use type arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2755,
    "codeText": "TS2755",
    "title": "No constituent of type '{0}' is callable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2756,
    "codeText": "TS2756",
    "title": "Not all constituents of type '{0}' are callable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2757,
    "codeText": "TS2757",
    "title": "Type '{0}' has no call signatures.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2758,
    "codeText": "TS2758",
    "title": "Each member of the union type '{0}' has signatures, but none of those signatures are compatible with each other.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2759,
    "codeText": "TS2759",
    "title": "No constituent of type '{0}' is constructable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2760,
    "codeText": "TS2760",
    "title": "Not all constituents of type '{0}' are constructable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2761,
    "codeText": "TS2761",
    "title": "Type '{0}' has no construct signatures.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2762,
    "codeText": "TS2762",
    "title": "Each member of the union type '{0}' has construct signatures, but none of those signatures are compatible with each other.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2763,
    "codeText": "TS2763",
    "title": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but for-of will always send '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2764,
    "codeText": "TS2764",
    "title": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array spread will always send '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2765,
    "codeText": "TS2765",
    "title": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array destructuring will always send '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2766,
    "codeText": "TS2766",
    "title": "Cannot delegate iteration to value because the 'next' method of its iterator expects type '{1}', but the containing generator will always send '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2767,
    "codeText": "TS2767",
    "title": "The '{0}' property of an iterator must be a method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2768,
    "codeText": "TS2768",
    "title": "The '{0}' property of an async iterator must be a method.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2769,
    "codeText": "TS2769",
    "title": "No overload matches this call.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2770,
    "codeText": "TS2770",
    "title": "The last overload gave the following error.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2771,
    "codeText": "TS2771",
    "title": "The last overload is declared here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2772,
    "codeText": "TS2772",
    "title": "Overload {0} of {1}, '{2}', gave the following error.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2773,
    "codeText": "TS2773",
    "title": "Did you forget to use 'await'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2774,
    "codeText": "TS2774",
    "title": "This condition will always return true since this function is always defined. Did you mean to call it instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2775,
    "codeText": "TS2775",
    "title": "Assertions require every name in the call target to be declared with an explicit type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2776,
    "codeText": "TS2776",
    "title": "Assertions require the call target to be an identifier or qualified name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2777,
    "codeText": "TS2777",
    "title": "The operand of an increment or decrement operator may not be an optional property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2778,
    "codeText": "TS2778",
    "title": "The target of an object rest assignment may not be an optional property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2779,
    "codeText": "TS2779",
    "title": "The left-hand side of an assignment expression may not be an optional property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2780,
    "codeText": "TS2780",
    "title": "The left-hand side of a 'for...in' statement may not be an optional property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2781,
    "codeText": "TS2781",
    "title": "The left-hand side of a 'for...of' statement may not be an optional property access.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2782,
    "codeText": "TS2782",
    "title": "'{0}' needs an explicit type annotation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 2783,
    "codeText": "TS2783",
    "title": "'{0}' is specified more than once, so this usage will be overwritten.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2784,
    "codeText": "TS2784",
    "title": "'get' and 'set' accessors cannot declare 'this' parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2785,
    "codeText": "TS2785",
    "title": "This spread always overwrites this property.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2786,
    "codeText": "TS2786",
    "title": "'{0}' cannot be used as a JSX component.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2787,
    "codeText": "TS2787",
    "title": "Its return type '{0}' is not a valid JSX element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2788,
    "codeText": "TS2788",
    "title": "Its instance type '{0}' is not a valid JSX element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2789,
    "codeText": "TS2789",
    "title": "Its element type '{0}' is not a valid JSX element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2790,
    "codeText": "TS2790",
    "title": "The operand of a 'delete' operator must be optional.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2791,
    "codeText": "TS2791",
    "title": "Exponentiation cannot be performed on 'bigint' values unless the 'target' option is set to 'es2016' or later.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2792,
    "codeText": "TS2792",
    "title": "Cannot find module '{0}'. Did you mean to set the 'moduleResolution' option to 'node', or to add aliases to the 'paths' option?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2793,
    "codeText": "TS2793",
    "title": "The call would have succeeded against this implementation, but implementation signatures of overloads are not externally visible.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2794,
    "codeText": "TS2794",
    "title": "Expected {0} arguments, but got {1}. Did you forget to include 'void' in your type argument to 'Promise'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2795,
    "codeText": "TS2795",
    "title": "The 'intrinsic' keyword can only be used to declare compiler provided intrinsic types.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2796,
    "codeText": "TS2796",
    "title": "It is likely that you are missing a comma to separate these two template expressions. They form a tagged template expression which cannot be invoked.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2797,
    "codeText": "TS2797",
    "title": "A mixin class that extends from a type variable containing an abstract construct signature must also be declared 'abstract'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2798,
    "codeText": "TS2798",
    "title": "The declaration was marked as deprecated here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2799,
    "codeText": "TS2799",
    "title": "Type produces a tuple type that is too large to represent.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2800,
    "codeText": "TS2800",
    "title": "Expression produces a tuple type that is too large to represent.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2801,
    "codeText": "TS2801",
    "title": "This condition will always return true since this '{0}' is always defined.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2802,
    "codeText": "TS2802",
    "title": "Type '{0}' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2803,
    "codeText": "TS2803",
    "title": "Cannot assign to private method '{0}'. Private methods are not writable.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2804,
    "codeText": "TS2804",
    "title": "Duplicate identifier '{0}'. Static and instance elements cannot share the same private name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2806,
    "codeText": "TS2806",
    "title": "Private accessor was defined without a getter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2807,
    "codeText": "TS2807",
    "title": "This syntax requires an imported helper named '{1}' with {2} parameters, which is not compatible with the one in '{0}'. Consider upgrading your version of '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2808,
    "codeText": "TS2808",
    "title": "A get accessor must be at least as accessible as the setter",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2809,
    "codeText": "TS2809",
    "title": "Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the the whole assignment in parentheses.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2810,
    "codeText": "TS2810",
    "title": "Expected 1 argument, but got 0. 'new Promise()' needs a JSDoc hint to produce a 'resolve' that can be called without arguments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2811,
    "codeText": "TS2811",
    "title": "Initializer for property '{0}'",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2812,
    "codeText": "TS2812",
    "title": "Property '{0}' does not exist on type '{1}'. Try changing the 'lib' compiler option to include 'dom'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2813,
    "codeText": "TS2813",
    "title": "Class declaration cannot implement overload list for '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2814,
    "codeText": "TS2814",
    "title": "Function with bodies can only merge with classes that are ambient.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2815,
    "codeText": "TS2815",
    "title": "'arguments' cannot be referenced in property initializers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2816,
    "codeText": "TS2816",
    "title": "Cannot use 'this' in a static property initializer of a decorated class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2817,
    "codeText": "TS2817",
    "title": "Property '{0}' has no initializer and is not definitely assigned in a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2818,
    "codeText": "TS2818",
    "title": "Duplicate identifier '{0}'. Compiler reserves name '{1}' when emitting 'super' references in static initializers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2819,
    "codeText": "TS2819",
    "title": "Namespace name cannot be '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2820,
    "codeText": "TS2820",
    "title": "Type '{0}' is not assignable to type '{1}'. Did you mean '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2821,
    "codeText": "TS2821",
    "title": "Import assertions are only supported when the '--module' option is set to 'esnext' or 'nodenext'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2822,
    "codeText": "TS2822",
    "title": "Import assertions cannot be used with type-only imports or exports.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2833,
    "codeText": "TS2833",
    "title": "Cannot find namespace '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2834,
    "codeText": "TS2834",
    "title": "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2835,
    "codeText": "TS2835",
    "title": "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean '{0}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2836,
    "codeText": "TS2836",
    "title": "Import assertions are not allowed on statements that transpile to commonjs 'require' calls.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2837,
    "codeText": "TS2837",
    "title": "Import assertion values must be string literal expressions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2838,
    "codeText": "TS2838",
    "title": "All declarations of '{0}' must have identical constraints.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2839,
    "codeText": "TS2839",
    "title": "This condition will always return '{0}' since JavaScript compares objects by reference, not value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2840,
    "codeText": "TS2840",
    "title": "An interface cannot extend a primitive type like '{0}'; an interface can only extend named types and classes",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2841,
    "codeText": "TS2841",
    "title": "The type of this expression cannot be named without a 'resolution-mode' assertion, which is an unstable feature. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2842,
    "codeText": "TS2842",
    "title": "'{0}' is an unused renaming of '{1}'. Did you intend to use it as a type annotation?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2843,
    "codeText": "TS2843",
    "title": "We can only write a type for '{0}' by adding a type for the entire parameter here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2844,
    "codeText": "TS2844",
    "title": "Type of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2845,
    "codeText": "TS2845",
    "title": "This condition will always return '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2846,
    "codeText": "TS2846",
    "title": "A declaration file cannot be imported without 'import type'. Did you mean to import an implementation file '{0}' instead?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2848,
    "codeText": "TS2848",
    "title": "The right-hand side of an 'instanceof' expression must not be an instantiation expression.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2849,
    "codeText": "TS2849",
    "title": "Target signature provides too few arguments. Expected {0} or more, but got {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2850,
    "codeText": "TS2850",
    "title": "The initializer of a 'using' declaration must be either an object with a '[Symbol.dispose]()' method, or be 'null' or 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2851,
    "codeText": "TS2851",
    "title": "The initializer of an 'await using' declaration must be either an object with a '[Symbol.asyncDispose]()' or '[Symbol.dispose]()' method, or be 'null' or 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2852,
    "codeText": "TS2852",
    "title": "'await using' statements are only allowed within async functions and at the top levels of modules.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2853,
    "codeText": "TS2853",
    "title": "'await using' statements are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 2854,
    "codeText": "TS2854",
    "title": "Top-level 'await using' statements are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4000,
    "codeText": "TS4000",
    "title": "Import declaration '{0}' is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4002,
    "codeText": "TS4002",
    "title": "Type parameter '{0}' of exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4004,
    "codeText": "TS4004",
    "title": "Type parameter '{0}' of exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4006,
    "codeText": "TS4006",
    "title": "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4008,
    "codeText": "TS4008",
    "title": "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4010,
    "codeText": "TS4010",
    "title": "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4012,
    "codeText": "TS4012",
    "title": "Type parameter '{0}' of public method from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4014,
    "codeText": "TS4014",
    "title": "Type parameter '{0}' of method from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4016,
    "codeText": "TS4016",
    "title": "Type parameter '{0}' of exported function has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4019,
    "codeText": "TS4019",
    "title": "Implements clause of exported class '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4020,
    "codeText": "TS4020",
    "title": "'extends' clause of exported class '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4021,
    "codeText": "TS4021",
    "title": "'extends' clause of exported class has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4022,
    "codeText": "TS4022",
    "title": "'extends' clause of exported interface '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4023,
    "codeText": "TS4023",
    "title": "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4024,
    "codeText": "TS4024",
    "title": "Exported variable '{0}' has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4025,
    "codeText": "TS4025",
    "title": "Exported variable '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4026,
    "codeText": "TS4026",
    "title": "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4027,
    "codeText": "TS4027",
    "title": "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4028,
    "codeText": "TS4028",
    "title": "Public static property '{0}' of exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4029,
    "codeText": "TS4029",
    "title": "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4030,
    "codeText": "TS4030",
    "title": "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4031,
    "codeText": "TS4031",
    "title": "Public property '{0}' of exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4032,
    "codeText": "TS4032",
    "title": "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4033,
    "codeText": "TS4033",
    "title": "Property '{0}' of exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4034,
    "codeText": "TS4034",
    "title": "Parameter type of public static setter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4035,
    "codeText": "TS4035",
    "title": "Parameter type of public static setter '{0}' from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4036,
    "codeText": "TS4036",
    "title": "Parameter type of public setter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4037,
    "codeText": "TS4037",
    "title": "Parameter type of public setter '{0}' from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4038,
    "codeText": "TS4038",
    "title": "Return type of public static getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4039,
    "codeText": "TS4039",
    "title": "Return type of public static getter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4040,
    "codeText": "TS4040",
    "title": "Return type of public static getter '{0}' from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4041,
    "codeText": "TS4041",
    "title": "Return type of public getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4042,
    "codeText": "TS4042",
    "title": "Return type of public getter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4043,
    "codeText": "TS4043",
    "title": "Return type of public getter '{0}' from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4044,
    "codeText": "TS4044",
    "title": "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4045,
    "codeText": "TS4045",
    "title": "Return type of constructor signature from exported interface has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4046,
    "codeText": "TS4046",
    "title": "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4047,
    "codeText": "TS4047",
    "title": "Return type of call signature from exported interface has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4048,
    "codeText": "TS4048",
    "title": "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4049,
    "codeText": "TS4049",
    "title": "Return type of index signature from exported interface has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4050,
    "codeText": "TS4050",
    "title": "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4051,
    "codeText": "TS4051",
    "title": "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4052,
    "codeText": "TS4052",
    "title": "Return type of public static method from exported class has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4053,
    "codeText": "TS4053",
    "title": "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4054,
    "codeText": "TS4054",
    "title": "Return type of public method from exported class has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4055,
    "codeText": "TS4055",
    "title": "Return type of public method from exported class has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4056,
    "codeText": "TS4056",
    "title": "Return type of method from exported interface has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4057,
    "codeText": "TS4057",
    "title": "Return type of method from exported interface has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4058,
    "codeText": "TS4058",
    "title": "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4059,
    "codeText": "TS4059",
    "title": "Return type of exported function has or is using name '{0}' from private module '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4060,
    "codeText": "TS4060",
    "title": "Return type of exported function has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4061,
    "codeText": "TS4061",
    "title": "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4062,
    "codeText": "TS4062",
    "title": "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4063,
    "codeText": "TS4063",
    "title": "Parameter '{0}' of constructor from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4064,
    "codeText": "TS4064",
    "title": "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4065,
    "codeText": "TS4065",
    "title": "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4066,
    "codeText": "TS4066",
    "title": "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4067,
    "codeText": "TS4067",
    "title": "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4068,
    "codeText": "TS4068",
    "title": "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4069,
    "codeText": "TS4069",
    "title": "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4070,
    "codeText": "TS4070",
    "title": "Parameter '{0}' of public static method from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4071,
    "codeText": "TS4071",
    "title": "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4072,
    "codeText": "TS4072",
    "title": "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4073,
    "codeText": "TS4073",
    "title": "Parameter '{0}' of public method from exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4074,
    "codeText": "TS4074",
    "title": "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4075,
    "codeText": "TS4075",
    "title": "Parameter '{0}' of method from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4076,
    "codeText": "TS4076",
    "title": "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4077,
    "codeText": "TS4077",
    "title": "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4078,
    "codeText": "TS4078",
    "title": "Parameter '{0}' of exported function has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4081,
    "codeText": "TS4081",
    "title": "Exported type alias '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4082,
    "codeText": "TS4082",
    "title": "Default export of the module has or is using private name '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4083,
    "codeText": "TS4083",
    "title": "Type parameter '{0}' of exported type alias has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4084,
    "codeText": "TS4084",
    "title": "Exported type alias '{0}' has or is using private name '{1}' from module {2}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4085,
    "codeText": "TS4085",
    "title": "Extends clause for inferred type '{0}' has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4090,
    "codeText": "TS4090",
    "title": "Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4091,
    "codeText": "TS4091",
    "title": "Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4092,
    "codeText": "TS4092",
    "title": "Parameter '{0}' of index signature from exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4094,
    "codeText": "TS4094",
    "title": "Property '{0}' of exported class expression may not be private or protected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4095,
    "codeText": "TS4095",
    "title": "Public static method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4096,
    "codeText": "TS4096",
    "title": "Public static method '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4097,
    "codeText": "TS4097",
    "title": "Public static method '{0}' of exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4098,
    "codeText": "TS4098",
    "title": "Public method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4099,
    "codeText": "TS4099",
    "title": "Public method '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4100,
    "codeText": "TS4100",
    "title": "Public method '{0}' of exported class has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4101,
    "codeText": "TS4101",
    "title": "Method '{0}' of exported interface has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4102,
    "codeText": "TS4102",
    "title": "Method '{0}' of exported interface has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4103,
    "codeText": "TS4103",
    "title": "Type parameter '{0}' of exported mapped object type is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4104,
    "codeText": "TS4104",
    "title": "The type '{0}' is 'readonly' and cannot be assigned to the mutable type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4105,
    "codeText": "TS4105",
    "title": "Private or protected member '{0}' cannot be accessed on a type parameter.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4106,
    "codeText": "TS4106",
    "title": "Parameter '{0}' of accessor has or is using private name '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4107,
    "codeText": "TS4107",
    "title": "Parameter '{0}' of accessor has or is using name '{1}' from private module '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4108,
    "codeText": "TS4108",
    "title": "Parameter '{0}' of accessor has or is using name '{1}' from external module '{2}' but cannot be named.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4109,
    "codeText": "TS4109",
    "title": "Type arguments for '{0}' circularly reference themselves.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4110,
    "codeText": "TS4110",
    "title": "Tuple type arguments circularly reference themselves.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4111,
    "codeText": "TS4111",
    "title": "Property '{0}' comes from an index signature, so it must be accessed with ['{0}'].",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4112,
    "codeText": "TS4112",
    "title": "This member cannot have an 'override' modifier because its containing class '{0}' does not extend another class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4113,
    "codeText": "TS4113",
    "title": "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4114,
    "codeText": "TS4114",
    "title": "This member must have an 'override' modifier because it overrides a member in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4115,
    "codeText": "TS4115",
    "title": "This parameter property must have an 'override' modifier because it overrides a member in base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4116,
    "codeText": "TS4116",
    "title": "This member must have an 'override' modifier because it overrides an abstract method that is declared in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4117,
    "codeText": "TS4117",
    "title": "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4118,
    "codeText": "TS4118",
    "title": "The type of this node cannot be serialized because its property '{0}' cannot be serialized.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4119,
    "codeText": "TS4119",
    "title": "This member must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4120,
    "codeText": "TS4120",
    "title": "This parameter property must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4121,
    "codeText": "TS4121",
    "title": "This member cannot have a JSDoc comment with an '@override' tag because its containing class '{0}' does not extend another class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4122,
    "codeText": "TS4122",
    "title": "This member cannot have a JSDoc comment with an '@override' tag because it is not declared in the base class '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4123,
    "codeText": "TS4123",
    "title": "This member cannot have a JSDoc comment with an 'override' tag because it is not declared in the base class '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4124,
    "codeText": "TS4124",
    "title": "Compiler option '{0}' of value '{1}' is unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 4125,
    "codeText": "TS4125",
    "title": "'resolution-mode' assertions are unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5001,
    "codeText": "TS5001",
    "title": "The current host does not support the '{0}' option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5009,
    "codeText": "TS5009",
    "title": "Cannot find the common subdirectory path for the input files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5010,
    "codeText": "TS5010",
    "title": "File specification cannot end in a recursive directory wildcard ('**'): '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5012,
    "codeText": "TS5012",
    "title": "Cannot read file '{0}': {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5014,
    "codeText": "TS5014",
    "title": "Failed to parse file '{0}': {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5023,
    "codeText": "TS5023",
    "title": "Unknown compiler option '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5024,
    "codeText": "TS5024",
    "title": "Compiler option '{0}' requires a value of type {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5025,
    "codeText": "TS5025",
    "title": "Unknown compiler option '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5033,
    "codeText": "TS5033",
    "title": "Could not write file '{0}': {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5042,
    "codeText": "TS5042",
    "title": "Option 'project' cannot be mixed with source files on a command line.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5047,
    "codeText": "TS5047",
    "title": "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5048,
    "codeText": "TS5048",
    "title": "Option '{0}' cannot be specified when option 'target' is 'ES3'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5051,
    "codeText": "TS5051",
    "title": "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5052,
    "codeText": "TS5052",
    "title": "Option '{0}' cannot be specified without specifying option '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5053,
    "codeText": "TS5053",
    "title": "Option '{0}' cannot be specified with option '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5054,
    "codeText": "TS5054",
    "title": "A 'tsconfig.json' file is already defined at: '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5055,
    "codeText": "TS5055",
    "title": "Cannot write file '{0}' because it would overwrite input file.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5056,
    "codeText": "TS5056",
    "title": "Cannot write file '{0}' because it would be overwritten by multiple input files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5057,
    "codeText": "TS5057",
    "title": "Cannot find a tsconfig.json file at the specified directory: '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5058,
    "codeText": "TS5058",
    "title": "The specified path does not exist: '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5059,
    "codeText": "TS5059",
    "title": "Invalid value for '--reactNamespace'. '{0}' is not a valid identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5061,
    "codeText": "TS5061",
    "title": "Pattern '{0}' can have at most one '*' character.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5062,
    "codeText": "TS5062",
    "title": "Substitution '{0}' in pattern '{1}' can have at most one '*' character.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5063,
    "codeText": "TS5063",
    "title": "Substitutions for pattern '{0}' should be an array.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5064,
    "codeText": "TS5064",
    "title": "Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5065,
    "codeText": "TS5065",
    "title": "File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5066,
    "codeText": "TS5066",
    "title": "Substitutions for pattern '{0}' shouldn't be an empty array.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5067,
    "codeText": "TS5067",
    "title": "Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5068,
    "codeText": "TS5068",
    "title": "Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5069,
    "codeText": "TS5069",
    "title": "Option '{0}' cannot be specified without specifying option '{1}' or option '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5070,
    "codeText": "TS5070",
    "title": "Option '--resolveJsonModule' cannot be specified without 'node' module resolution strategy.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5071,
    "codeText": "TS5071",
    "title": "Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5072,
    "codeText": "TS5072",
    "title": "Unknown build option '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5073,
    "codeText": "TS5073",
    "title": "Build option '{0}' requires a value of type {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5074,
    "codeText": "TS5074",
    "title": "Option '--incremental' can only be specified using tsconfig, emitting to single file or when option '--tsBuildInfoFile' is specified.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5075,
    "codeText": "TS5075",
    "title": "'{0}' is assignable to the constraint of type '{1}', but '{1}' could be instantiated with a different subtype of constraint '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5076,
    "codeText": "TS5076",
    "title": "'{0}' and '{1}' operations cannot be mixed without parentheses.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5077,
    "codeText": "TS5077",
    "title": "Unknown build option '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5078,
    "codeText": "TS5078",
    "title": "Unknown watch option '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5079,
    "codeText": "TS5079",
    "title": "Unknown watch option '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5080,
    "codeText": "TS5080",
    "title": "Watch option '{0}' requires a value of type {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5081,
    "codeText": "TS5081",
    "title": "Cannot find a tsconfig.json file at the current directory: {0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5082,
    "codeText": "TS5082",
    "title": "'{0}' could be instantiated with an arbitrary type which could be unrelated to '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5083,
    "codeText": "TS5083",
    "title": "Cannot read file '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5084,
    "codeText": "TS5084",
    "title": "Tuple members must all have names or all not have names.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5085,
    "codeText": "TS5085",
    "title": "A tuple member cannot be both optional and rest.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5086,
    "codeText": "TS5086",
    "title": "A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5087,
    "codeText": "TS5087",
    "title": "A labeled tuple element is declared as rest with a '...' before the name, rather than before the type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5088,
    "codeText": "TS5088",
    "title": "The inferred type of '{0}' references a type with a cyclic structure which cannot be trivially serialized. A type annotation is necessary.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5089,
    "codeText": "TS5089",
    "title": "Option '{0}' cannot be specified when option 'jsx' is '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5090,
    "codeText": "TS5090",
    "title": "Non-relative paths are not allowed when 'baseUrl' is not set. Did you forget a leading './'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5091,
    "codeText": "TS5091",
    "title": "Option 'preserveConstEnums' cannot be disabled when 'isolatedModules' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5092,
    "codeText": "TS5092",
    "title": "The root value of a '{0}' file must be an object.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5093,
    "codeText": "TS5093",
    "title": "Compiler option '--{0}' may only be used with '--build'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5094,
    "codeText": "TS5094",
    "title": "Compiler option '--{0}' may not be used with '--build'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5095,
    "codeText": "TS5095",
    "title": "Option 'preserveValueImports' can only be used when 'module' is set to 'es2015' or later.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5096,
    "codeText": "TS5096",
    "title": "Option 'allowImportingTsExtensions' can only be used when either 'noEmit' or 'emitDeclarationOnly' is set.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5097,
    "codeText": "TS5097",
    "title": "An import path can only end with a '{0}' extension when 'allowImportingTsExtensions' is enabled.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5098,
    "codeText": "TS5098",
    "title": "Option '{0}' can only be used when 'moduleResolution' is set to 'node16', 'nodenext', or 'bundler'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5099,
    "codeText": "TS5099",
    "title": "Import assignment is not allowed when 'moduleResolution' is set to 'bundler'. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5100,
    "codeText": "TS5100",
    "title": "Export assignment cannot be used when 'moduleResolution' is set to 'bundler'. Consider using 'export default' or another module format instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5101,
    "codeText": "TS5101",
    "title": "Flag '{0}' is deprecated and will stop functioning in TypeScript {1}. Specify 'ignoreDeprecations: \"{2}\"' to silence this error.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5102,
    "codeText": "TS5102",
    "title": "Flag '{0}' is deprecated. Please remove it from your configuration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5103,
    "codeText": "TS5103",
    "title": "Invalid value for '--ignoreDeprecations'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5104,
    "codeText": "TS5104",
    "title": "Option '{0}' is redundant and cannot be specified with option '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5105,
    "codeText": "TS5105",
    "title": "Option 'verbatimModuleSyntax' cannot be used when 'module' is set to 'UMD', 'AMD', or 'System'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5106,
    "codeText": "TS5106",
    "title": "Use '{0}' instead.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 5107,
    "codeText": "TS5107",
    "title": "Option '{0}={1}' is deprecated and will stop functioning in TypeScript {2}. Specify compilerOption '\"ignoreDeprecations\": \"{3}\"' to silence this error.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5108,
    "codeText": "TS5108",
    "title": "Option '{0}={1}' has been removed. Please remove it from your configuration.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5109,
    "codeText": "TS5109",
    "title": "Option 'moduleResolution' must be set to '{0}' (or left unspecified) when option 'module' is set to '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 5110,
    "codeText": "TS5110",
    "title": "Option 'module' must be set to '{0}' when option 'moduleResolution' is set to '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6000,
    "codeText": "TS6000",
    "title": "Generates a sourcemap for each corresponding '.d.ts' file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6001,
    "codeText": "TS6001",
    "title": "Concatenate and emit output to single file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6002,
    "codeText": "TS6002",
    "title": "Generates corresponding '.d.ts' file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6004,
    "codeText": "TS6004",
    "title": "Specify the location where debugger should locate TypeScript files instead of source locations.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6005,
    "codeText": "TS6005",
    "title": "Watch input files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6006,
    "codeText": "TS6006",
    "title": "Redirect output structure to the directory.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6007,
    "codeText": "TS6007",
    "title": "Do not erase const enum declarations in generated code.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6008,
    "codeText": "TS6008",
    "title": "Do not emit outputs if any errors were reported.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6009,
    "codeText": "TS6009",
    "title": "Do not emit comments to output.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6010,
    "codeText": "TS6010",
    "title": "Do not emit outputs.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6011,
    "codeText": "TS6011",
    "title": "Allow default imports from modules with no default export. This does not affect code emit, just typechecking.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6012,
    "codeText": "TS6012",
    "title": "Skip type checking of declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6013,
    "codeText": "TS6013",
    "title": "Do not resolve the real path of symlinks.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6014,
    "codeText": "TS6014",
    "title": "Only emit '.d.ts' declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6015,
    "codeText": "TS6015",
    "title": "Specify ECMAScript target version.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6016,
    "codeText": "TS6016",
    "title": "Specify module code generation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6017,
    "codeText": "TS6017",
    "title": "Print this message.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6019,
    "codeText": "TS6019",
    "title": "Print the compiler's version.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6020,
    "codeText": "TS6020",
    "title": "Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6023,
    "codeText": "TS6023",
    "title": "Syntax: {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6024,
    "codeText": "TS6024",
    "title": "options",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6025,
    "codeText": "TS6025",
    "title": "file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6026,
    "codeText": "TS6026",
    "title": "Examples: {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6027,
    "codeText": "TS6027",
    "title": "Options:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6029,
    "codeText": "TS6029",
    "title": "Version {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6030,
    "codeText": "TS6030",
    "title": "Insert command line options and files from a file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6031,
    "codeText": "TS6031",
    "title": "Starting compilation in watch mode...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6032,
    "codeText": "TS6032",
    "title": "File change detected. Starting incremental compilation...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6034,
    "codeText": "TS6034",
    "title": "KIND",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6035,
    "codeText": "TS6035",
    "title": "FILE",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6036,
    "codeText": "TS6036",
    "title": "VERSION",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6037,
    "codeText": "TS6037",
    "title": "LOCATION",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6038,
    "codeText": "TS6038",
    "title": "DIRECTORY",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6039,
    "codeText": "TS6039",
    "title": "STRATEGY",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6040,
    "codeText": "TS6040",
    "title": "FILE OR DIRECTORY",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6041,
    "codeText": "TS6041",
    "title": "Errors  Files",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6043,
    "codeText": "TS6043",
    "title": "Generates corresponding '.map' file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6044,
    "codeText": "TS6044",
    "title": "Compiler option '{0}' expects an argument.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6045,
    "codeText": "TS6045",
    "title": "Unterminated quoted string in response file '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6046,
    "codeText": "TS6046",
    "title": "Argument for '{0}' option must be: {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6048,
    "codeText": "TS6048",
    "title": "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6050,
    "codeText": "TS6050",
    "title": "Unable to open file '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6051,
    "codeText": "TS6051",
    "title": "Corrupted locale file {0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6052,
    "codeText": "TS6052",
    "title": "Raise error on expressions and declarations with an implied 'any' type.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6053,
    "codeText": "TS6053",
    "title": "File '{0}' not found.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6054,
    "codeText": "TS6054",
    "title": "File '{0}' has an unsupported extension. The only supported extensions are {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6055,
    "codeText": "TS6055",
    "title": "Suppress noImplicitAny errors for indexing objects lacking index signatures.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6056,
    "codeText": "TS6056",
    "title": "Do not emit declarations for code that has an '@internal' annotation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6058,
    "codeText": "TS6058",
    "title": "Specify the root directory of input files. Use to control the output directory structure with --outDir.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6059,
    "codeText": "TS6059",
    "title": "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6060,
    "codeText": "TS6060",
    "title": "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6061,
    "codeText": "TS6061",
    "title": "NEWLINE",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6064,
    "codeText": "TS6064",
    "title": "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6065,
    "codeText": "TS6065",
    "title": "Enables experimental support for ES7 decorators.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6066,
    "codeText": "TS6066",
    "title": "Enables experimental support for emitting type metadata for decorators.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6069,
    "codeText": "TS6069",
    "title": "Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6070,
    "codeText": "TS6070",
    "title": "Initializes a TypeScript project and creates a tsconfig.json file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6071,
    "codeText": "TS6071",
    "title": "Successfully created a tsconfig.json file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6072,
    "codeText": "TS6072",
    "title": "Suppress excess property checks for object literals.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6073,
    "codeText": "TS6073",
    "title": "Stylize errors and messages using color and context (experimental).",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6074,
    "codeText": "TS6074",
    "title": "Do not report errors on unused labels.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6075,
    "codeText": "TS6075",
    "title": "Report error when not all code paths in function return a value.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6076,
    "codeText": "TS6076",
    "title": "Report errors for fallthrough cases in switch statement.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6077,
    "codeText": "TS6077",
    "title": "Do not report errors on unreachable code.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6078,
    "codeText": "TS6078",
    "title": "Disallow inconsistently-cased references to the same file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6079,
    "codeText": "TS6079",
    "title": "Specify library files to be included in the compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6080,
    "codeText": "TS6080",
    "title": "Specify JSX code generation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6081,
    "codeText": "TS6081",
    "title": "File '{0}' has an unsupported extension, so skipping it.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6082,
    "codeText": "TS6082",
    "title": "Only 'amd' and 'system' modules are supported alongside --{0}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6083,
    "codeText": "TS6083",
    "title": "Base directory to resolve non-absolute module names.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6084,
    "codeText": "TS6084",
    "title": "[Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6085,
    "codeText": "TS6085",
    "title": "Enable tracing of the name resolution process.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6086,
    "codeText": "TS6086",
    "title": "======== Resolving module '{0}' from '{1}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6087,
    "codeText": "TS6087",
    "title": "Explicitly specified module resolution kind: '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6088,
    "codeText": "TS6088",
    "title": "Module resolution kind is not specified, using '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6089,
    "codeText": "TS6089",
    "title": "======== Module name '{0}' was successfully resolved to '{1}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6090,
    "codeText": "TS6090",
    "title": "======== Module name '{0}' was not resolved. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6091,
    "codeText": "TS6091",
    "title": "'paths' option is specified, looking for a pattern to match module name '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6092,
    "codeText": "TS6092",
    "title": "Module name '{0}', matched pattern '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6093,
    "codeText": "TS6093",
    "title": "Trying substitution '{0}', candidate module location: '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6094,
    "codeText": "TS6094",
    "title": "Resolving module name '{0}' relative to base url '{1}' - '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6095,
    "codeText": "TS6095",
    "title": "Loading module as file / folder, candidate module location '{0}', target file type '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6096,
    "codeText": "TS6096",
    "title": "File '{0}' does not exist.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6097,
    "codeText": "TS6097",
    "title": "File '{0}' exist - use it as a name resolution result.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6098,
    "codeText": "TS6098",
    "title": "Loading module '{0}' from 'node_modules' folder, target file type '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6099,
    "codeText": "TS6099",
    "title": "Found 'package.json' at '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6100,
    "codeText": "TS6100",
    "title": "'package.json' does not have a '{0}' field.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6101,
    "codeText": "TS6101",
    "title": "'package.json' has '{0}' field '{1}' that references '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6102,
    "codeText": "TS6102",
    "title": "Allow javascript files to be compiled.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6104,
    "codeText": "TS6104",
    "title": "Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6105,
    "codeText": "TS6105",
    "title": "Expected type of '{0}' field in 'package.json' to be '{1}', got '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6106,
    "codeText": "TS6106",
    "title": "'baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6107,
    "codeText": "TS6107",
    "title": "'rootDirs' option is set, using it to resolve relative module name '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6108,
    "codeText": "TS6108",
    "title": "Longest matching prefix for '{0}' is '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6109,
    "codeText": "TS6109",
    "title": "Loading '{0}' from the root dir '{1}', candidate location '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6110,
    "codeText": "TS6110",
    "title": "Trying other entries in 'rootDirs'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6111,
    "codeText": "TS6111",
    "title": "Module resolution using 'rootDirs' has failed.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6112,
    "codeText": "TS6112",
    "title": "Do not emit 'use strict' directives in module output.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6113,
    "codeText": "TS6113",
    "title": "Enable strict null checks.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6114,
    "codeText": "TS6114",
    "title": "Unknown option 'excludes'. Did you mean 'exclude'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6115,
    "codeText": "TS6115",
    "title": "Raise error on 'this' expressions with an implied 'any' type.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6116,
    "codeText": "TS6116",
    "title": "======== Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6119,
    "codeText": "TS6119",
    "title": "======== Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6120,
    "codeText": "TS6120",
    "title": "======== Type reference directive '{0}' was not resolved. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6121,
    "codeText": "TS6121",
    "title": "Resolving with primary search path '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6122,
    "codeText": "TS6122",
    "title": "Root directory cannot be determined, skipping primary search paths.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6123,
    "codeText": "TS6123",
    "title": "======== Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6124,
    "codeText": "TS6124",
    "title": "Type declaration files to be included in compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6125,
    "codeText": "TS6125",
    "title": "Looking up in 'node_modules' folder, initial location '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6126,
    "codeText": "TS6126",
    "title": "Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6127,
    "codeText": "TS6127",
    "title": "======== Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6128,
    "codeText": "TS6128",
    "title": "======== Resolving type reference directive '{0}', containing file not set, root directory not set. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6130,
    "codeText": "TS6130",
    "title": "Resolving real path for '{0}', result '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6131,
    "codeText": "TS6131",
    "title": "Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6132,
    "codeText": "TS6132",
    "title": "File name '{0}' has a '{1}' extension - stripping it.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6133,
    "codeText": "TS6133",
    "title": "'{0}' is declared but its value is never read.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6134,
    "codeText": "TS6134",
    "title": "Report errors on unused locals.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6135,
    "codeText": "TS6135",
    "title": "Report errors on unused parameters.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6136,
    "codeText": "TS6136",
    "title": "The maximum dependency depth to search under node_modules and load JavaScript files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6137,
    "codeText": "TS6137",
    "title": "Cannot import type declaration files. Consider importing '{0}' instead of '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6138,
    "codeText": "TS6138",
    "title": "Property '{0}' is declared but its value is never read.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6139,
    "codeText": "TS6139",
    "title": "Import emit helpers from 'tslib'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6140,
    "codeText": "TS6140",
    "title": "Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6141,
    "codeText": "TS6141",
    "title": "Parse in strict mode and emit \"use strict\" for each source file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6142,
    "codeText": "TS6142",
    "title": "Module '{0}' was resolved to '{1}', but '--jsx' is not set.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6144,
    "codeText": "TS6144",
    "title": "Module '{0}' was resolved as locally declared ambient module in file '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6145,
    "codeText": "TS6145",
    "title": "Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6146,
    "codeText": "TS6146",
    "title": "Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6147,
    "codeText": "TS6147",
    "title": "Resolution for module '{0}' was found in cache from location '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6148,
    "codeText": "TS6148",
    "title": "Directory '{0}' does not exist, skipping all lookups in it.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6149,
    "codeText": "TS6149",
    "title": "Show diagnostic information.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6150,
    "codeText": "TS6150",
    "title": "Show verbose diagnostic information.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6151,
    "codeText": "TS6151",
    "title": "Emit a single file with source maps instead of having a separate file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6152,
    "codeText": "TS6152",
    "title": "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6153,
    "codeText": "TS6153",
    "title": "Transpile each file as a separate module (similar to 'ts.transpileModule').",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6154,
    "codeText": "TS6154",
    "title": "Print names of generated files part of the compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6155,
    "codeText": "TS6155",
    "title": "Print names of files part of the compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6156,
    "codeText": "TS6156",
    "title": "The locale used when displaying messages to the user (e.g. 'en-us')",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6157,
    "codeText": "TS6157",
    "title": "Do not generate custom helper functions like '__extends' in compiled output.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6158,
    "codeText": "TS6158",
    "title": "Do not include the default library file (lib.d.ts).",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6159,
    "codeText": "TS6159",
    "title": "Do not add triple-slash references or imported modules to the list of compiled files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6160,
    "codeText": "TS6160",
    "title": "[Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6161,
    "codeText": "TS6161",
    "title": "List of folders to include type definitions from.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6162,
    "codeText": "TS6162",
    "title": "Disable size limitations on JavaScript projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6163,
    "codeText": "TS6163",
    "title": "The character set of the input files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6164,
    "codeText": "TS6164",
    "title": "Skipping module '{0}' that looks like an absolute URI, target file types: {1}.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6165,
    "codeText": "TS6165",
    "title": "Do not truncate error messages.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6166,
    "codeText": "TS6166",
    "title": "Output directory for generated declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6167,
    "codeText": "TS6167",
    "title": "A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6168,
    "codeText": "TS6168",
    "title": "List of root folders whose combined content represents the structure of the project at runtime.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6169,
    "codeText": "TS6169",
    "title": "Show all compiler options.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6170,
    "codeText": "TS6170",
    "title": "[Deprecated] Use '--outFile' instead. Concatenate and emit output to single file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6171,
    "codeText": "TS6171",
    "title": "Command-line Options",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6179,
    "codeText": "TS6179",
    "title": "Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6180,
    "codeText": "TS6180",
    "title": "Enable all strict type-checking options.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6182,
    "codeText": "TS6182",
    "title": "Scoped package detected, looking in '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6183,
    "codeText": "TS6183",
    "title": "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6184,
    "codeText": "TS6184",
    "title": "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6186,
    "codeText": "TS6186",
    "title": "Enable strict checking of function types.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6187,
    "codeText": "TS6187",
    "title": "Enable strict checking of property initialization in classes.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6188,
    "codeText": "TS6188",
    "title": "Numeric separators are not allowed here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6189,
    "codeText": "TS6189",
    "title": "Multiple consecutive numeric separators are not permitted.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6191,
    "codeText": "TS6191",
    "title": "Whether to keep outdated console output in watch mode instead of clearing the screen.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6192,
    "codeText": "TS6192",
    "title": "All imports in import declaration are unused.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6193,
    "codeText": "TS6193",
    "title": "Found 1 error. Watching for file changes.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6194,
    "codeText": "TS6194",
    "title": "Found {0} errors. Watching for file changes.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6195,
    "codeText": "TS6195",
    "title": "Resolve 'keyof' to string valued property names only (no numbers or symbols).",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6196,
    "codeText": "TS6196",
    "title": "'{0}' is declared but never used.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6197,
    "codeText": "TS6197",
    "title": "Include modules imported with '.json' extension",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6198,
    "codeText": "TS6198",
    "title": "All destructured elements are unused.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6199,
    "codeText": "TS6199",
    "title": "All variables are unused.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6200,
    "codeText": "TS6200",
    "title": "Definitions of the following identifiers conflict with those in another file: {0}",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6201,
    "codeText": "TS6201",
    "title": "Conflicts are in this file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6202,
    "codeText": "TS6202",
    "title": "Project references may not form a circular graph. Cycle detected: {0}",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6203,
    "codeText": "TS6203",
    "title": "'{0}' was also declared here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6204,
    "codeText": "TS6204",
    "title": "and here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6205,
    "codeText": "TS6205",
    "title": "All type parameters are unused.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6206,
    "codeText": "TS6206",
    "title": "'package.json' has a 'typesVersions' field with version-specific path mappings.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6207,
    "codeText": "TS6207",
    "title": "'package.json' does not have a 'typesVersions' entry that matches version '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6208,
    "codeText": "TS6208",
    "title": "'package.json' has a 'typesVersions' entry '{0}' that matches compiler version '{1}', looking for a pattern to match module name '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6209,
    "codeText": "TS6209",
    "title": "'package.json' has a 'typesVersions' entry '{0}' that is not a valid semver range.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6210,
    "codeText": "TS6210",
    "title": "An argument for '{0}' was not provided.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6211,
    "codeText": "TS6211",
    "title": "An argument matching this binding pattern was not provided.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6212,
    "codeText": "TS6212",
    "title": "Did you mean to call this expression?",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6213,
    "codeText": "TS6213",
    "title": "Did you mean to use 'new' with this expression?",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6214,
    "codeText": "TS6214",
    "title": "Enable strict 'bind', 'call', and 'apply' methods on functions.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6215,
    "codeText": "TS6215",
    "title": "Using compiler options of project reference redirect '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6216,
    "codeText": "TS6216",
    "title": "Found 1 error.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6217,
    "codeText": "TS6217",
    "title": "Found {0} errors.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6218,
    "codeText": "TS6218",
    "title": "======== Module name '{0}' was successfully resolved to '{1}' with Package ID '{2}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6219,
    "codeText": "TS6219",
    "title": "======== Type reference directive '{0}' was successfully resolved to '{1}' with Package ID '{2}', primary: {3}. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6220,
    "codeText": "TS6220",
    "title": "'package.json' had a falsy '{0}' field.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6221,
    "codeText": "TS6221",
    "title": "Disable use of source files instead of declaration files from referenced projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6222,
    "codeText": "TS6222",
    "title": "Emit class fields with Define instead of Set.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6223,
    "codeText": "TS6223",
    "title": "Generates a CPU profile.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6224,
    "codeText": "TS6224",
    "title": "Disable solution searching for this project.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6225,
    "codeText": "TS6225",
    "title": "Specify strategy for watching file: 'FixedPollingInterval' (default), 'PriorityPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling', 'UseFsEvents', 'UseFsEventsOnParentDirectory'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6226,
    "codeText": "TS6226",
    "title": "Specify strategy for watching directory on platforms that don't support recursive watching natively: 'UseFsEvents' (default), 'FixedPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6227,
    "codeText": "TS6227",
    "title": "Specify strategy for creating a polling watch when it fails to create using file system events: 'FixedInterval' (default), 'PriorityInterval', 'DynamicPriority', 'FixedChunkSize'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6229,
    "codeText": "TS6229",
    "title": "Tag '{0}' expects at least '{1}' arguments, but the JSX factory '{2}' provides at most '{3}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6230,
    "codeText": "TS6230",
    "title": "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6231,
    "codeText": "TS6231",
    "title": "Could not resolve the path '{0}' with the extensions: {1}.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6232,
    "codeText": "TS6232",
    "title": "Declaration augments declaration in another file. This cannot be serialized.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6233,
    "codeText": "TS6233",
    "title": "This is the declaration being augmented. Consider moving the augmenting declaration into the same file.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6234,
    "codeText": "TS6234",
    "title": "This expression is not callable because it is a 'get' accessor. Did you mean to use it without '()'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6235,
    "codeText": "TS6235",
    "title": "Disable loading referenced projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6236,
    "codeText": "TS6236",
    "title": "Arguments for the rest parameter '{0}' were not provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6237,
    "codeText": "TS6237",
    "title": "Generates an event trace and a list of types.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6238,
    "codeText": "TS6238",
    "title": "Specify the module specifier to be used to import the 'jsx' and 'jsxs' factory functions from. eg, react",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6239,
    "codeText": "TS6239",
    "title": "File '{0}' exists according to earlier cached lookups.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6240,
    "codeText": "TS6240",
    "title": "File '{0}' does not exist according to earlier cached lookups.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6241,
    "codeText": "TS6241",
    "title": "Resolution for type reference directive '{0}' was found in cache from location '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6242,
    "codeText": "TS6242",
    "title": "======== Resolving type reference directive '{0}', containing file '{1}'. ========",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6243,
    "codeText": "TS6243",
    "title": "Interpret optional property types as written, rather than adding 'undefined'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6244,
    "codeText": "TS6244",
    "title": "Modules",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6245,
    "codeText": "TS6245",
    "title": "File Management",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6246,
    "codeText": "TS6246",
    "title": "Emit",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6247,
    "codeText": "TS6247",
    "title": "JavaScript Support",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6248,
    "codeText": "TS6248",
    "title": "Type Checking",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6249,
    "codeText": "TS6249",
    "title": "Editor Support",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6250,
    "codeText": "TS6250",
    "title": "Watch and Build Modes",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6251,
    "codeText": "TS6251",
    "title": "Compiler Diagnostics",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6252,
    "codeText": "TS6252",
    "title": "Interop Constraints",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6253,
    "codeText": "TS6253",
    "title": "Backwards Compatibility",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6254,
    "codeText": "TS6254",
    "title": "Language and Environment",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6255,
    "codeText": "TS6255",
    "title": "Projects",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6256,
    "codeText": "TS6256",
    "title": "Output Formatting",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6257,
    "codeText": "TS6257",
    "title": "Completeness",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6258,
    "codeText": "TS6258",
    "title": "'{0}' should be set inside the 'compilerOptions' object of the config json file",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6259,
    "codeText": "TS6259",
    "title": "Found 1 error in {1}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6260,
    "codeText": "TS6260",
    "title": "Found {0} errors in the same file, starting at: {1}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6261,
    "codeText": "TS6261",
    "title": "Found {0} errors in {1} files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6262,
    "codeText": "TS6262",
    "title": "File name '{0}' has a '{1}' extension - looking up '{2}' instead.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6263,
    "codeText": "TS6263",
    "title": "Module '{0}' was resolved to '{1}', but '--allowArbitraryExtensions' is not set.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6264,
    "codeText": "TS6264",
    "title": "Enable importing files with any extension, provided a declaration file is present.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6265,
    "codeText": "TS6265",
    "title": "Resolving type reference directive for program that specifies custom typeRoots, skipping lookup in 'node_modules' folder.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6266,
    "codeText": "TS6266",
    "title": "Option '{0}' can only be specified on command line.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6270,
    "codeText": "TS6270",
    "title": "Directory '{0}' has no containing package.json scope. Imports will not resolve.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6271,
    "codeText": "TS6271",
    "title": "Import specifier '{0}' does not exist in package.json scope at path '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6272,
    "codeText": "TS6272",
    "title": "Invalid import specifier '{0}' has no possible resolutions.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6273,
    "codeText": "TS6273",
    "title": "package.json scope '{0}' has no imports defined.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6274,
    "codeText": "TS6274",
    "title": "package.json scope '{0}' explicitly maps specifier '{1}' to null.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6275,
    "codeText": "TS6275",
    "title": "package.json scope '{0}' has invalid type for target of specifier '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6276,
    "codeText": "TS6276",
    "title": "Export specifier '{0}' does not exist in package.json scope at path '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6277,
    "codeText": "TS6277",
    "title": "Resolution of non-relative name failed; trying with modern Node resolution features disabled to see if npm library needs configuration update.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6278,
    "codeText": "TS6278",
    "title": "There are types at '{0}', but this result could not be resolved when respecting package.json \"exports\". The '{1}' library may need to update its package.json or typings.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6302,
    "codeText": "TS6302",
    "title": "Enable project compilation",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6304,
    "codeText": "TS6304",
    "title": "Composite projects may not disable declaration emit.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6305,
    "codeText": "TS6305",
    "title": "Output file '{0}' has not been built from source file '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6306,
    "codeText": "TS6306",
    "title": "Referenced project '{0}' must have setting \"composite\": true.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6307,
    "codeText": "TS6307",
    "title": "File '{0}' is not listed within the file list of project '{1}'. Projects must list all files or use an 'include' pattern.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6308,
    "codeText": "TS6308",
    "title": "Cannot prepend project '{0}' because it does not have 'outFile' set",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6309,
    "codeText": "TS6309",
    "title": "Output file '{0}' from project '{1}' does not exist",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6310,
    "codeText": "TS6310",
    "title": "Referenced project '{0}' may not disable emit.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6350,
    "codeText": "TS6350",
    "title": "Project '{0}' is out of date because output '{1}' is older than input '{2}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6351,
    "codeText": "TS6351",
    "title": "Project '{0}' is up to date because newest input '{1}' is older than output '{2}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6352,
    "codeText": "TS6352",
    "title": "Project '{0}' is out of date because output file '{1}' does not exist",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6353,
    "codeText": "TS6353",
    "title": "Project '{0}' is out of date because its dependency '{1}' is out of date",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6354,
    "codeText": "TS6354",
    "title": "Project '{0}' is up to date with .d.ts files from its dependencies",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6355,
    "codeText": "TS6355",
    "title": "Projects in this build: {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6356,
    "codeText": "TS6356",
    "title": "A non-dry build would delete the following files: {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6357,
    "codeText": "TS6357",
    "title": "A non-dry build would build project '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6358,
    "codeText": "TS6358",
    "title": "Building project '{0}'...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6359,
    "codeText": "TS6359",
    "title": "Updating output timestamps of project '{0}'...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6361,
    "codeText": "TS6361",
    "title": "Project '{0}' is up to date",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6362,
    "codeText": "TS6362",
    "title": "Skipping build of project '{0}' because its dependency '{1}' has errors",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6363,
    "codeText": "TS6363",
    "title": "Project '{0}' can't be built because its dependency '{1}' has errors",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6364,
    "codeText": "TS6364",
    "title": "Build one or more projects and their dependencies, if out of date",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6365,
    "codeText": "TS6365",
    "title": "Delete the outputs of all projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6367,
    "codeText": "TS6367",
    "title": "Show what would be built (or deleted, if specified with '--clean')",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6369,
    "codeText": "TS6369",
    "title": "Option '--build' must be the first command line argument.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6370,
    "codeText": "TS6370",
    "title": "Options '{0}' and '{1}' cannot be combined.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6371,
    "codeText": "TS6371",
    "title": "Updating unchanged output timestamps of project '{0}'...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6372,
    "codeText": "TS6372",
    "title": "Project '{0}' is out of date because output of its dependency '{1}' has changed",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6373,
    "codeText": "TS6373",
    "title": "Updating output of project '{0}'...",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6374,
    "codeText": "TS6374",
    "title": "A non-dry build would update timestamps for output of project '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6375,
    "codeText": "TS6375",
    "title": "A non-dry build would update output of project '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6376,
    "codeText": "TS6376",
    "title": "Cannot update output of project '{0}' because there was error reading file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6377,
    "codeText": "TS6377",
    "title": "Cannot write file '{0}' because it will overwrite '.tsbuildinfo' file generated by referenced project '{1}'",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6379,
    "codeText": "TS6379",
    "title": "Composite projects may not disable incremental compilation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6380,
    "codeText": "TS6380",
    "title": "Specify file to store incremental compilation information",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6381,
    "codeText": "TS6381",
    "title": "Project '{0}' is out of date because output for it was generated with version '{1}' that differs with current version '{2}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6382,
    "codeText": "TS6382",
    "title": "Skipping build of project '{0}' because its dependency '{1}' was not built",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6383,
    "codeText": "TS6383",
    "title": "Project '{0}' can't be built because its dependency '{1}' was not built",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6384,
    "codeText": "TS6384",
    "title": "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6385,
    "codeText": "TS6385",
    "title": "'{0}' is deprecated.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 6386,
    "codeText": "TS6386",
    "title": "Performance timings for '--diagnostics' or '--extendedDiagnostics' are not available in this session. A native implementation of the Web Performance API could not be found.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6387,
    "codeText": "TS6387",
    "title": "The signature '{0}' of '{1}' is deprecated.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 6388,
    "codeText": "TS6388",
    "title": "Project '{0}' is being forcibly rebuilt",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6389,
    "codeText": "TS6389",
    "title": "Reusing resolution of module '{0}' from '{1}' of old program, it was not resolved.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6390,
    "codeText": "TS6390",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6391,
    "codeText": "TS6391",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6392,
    "codeText": "TS6392",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was not resolved.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6393,
    "codeText": "TS6393",
    "title": "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6394,
    "codeText": "TS6394",
    "title": "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6395,
    "codeText": "TS6395",
    "title": "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was not resolved.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6396,
    "codeText": "TS6396",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6397,
    "codeText": "TS6397",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6398,
    "codeText": "TS6398",
    "title": "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was not resolved.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6399,
    "codeText": "TS6399",
    "title": "Project '{0}' is out of date because buildinfo file '{1}' indicates that some of the changes were not emitted",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6400,
    "codeText": "TS6400",
    "title": "Project '{0}' is up to date but needs to update timestamps of output files that are older than input files",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6401,
    "codeText": "TS6401",
    "title": "Project '{0}' is out of date because there was error reading file '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6402,
    "codeText": "TS6402",
    "title": "Resolving in {0} mode with conditions {1}.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6403,
    "codeText": "TS6403",
    "title": "Matched '{0}' condition '{1}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6404,
    "codeText": "TS6404",
    "title": "Using '{0}' subpath '{1}' with target '{2}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6405,
    "codeText": "TS6405",
    "title": "Saw non-matching condition '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6406,
    "codeText": "TS6406",
    "title": "Project '{0}' is out of date because buildinfo file '{1}' indicates there is change in compilerOptions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6407,
    "codeText": "TS6407",
    "title": "Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6408,
    "codeText": "TS6408",
    "title": "Use the package.json 'exports' field when resolving package imports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6409,
    "codeText": "TS6409",
    "title": "Use the package.json 'imports' field when resolving imports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6410,
    "codeText": "TS6410",
    "title": "Conditions to set in addition to the resolver-specific defaults when resolving imports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6411,
    "codeText": "TS6411",
    "title": "`true` when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise `false`.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6412,
    "codeText": "TS6412",
    "title": "Project '{0}' is out of date because buildinfo file '{1}' indicates that file '{2}' was root file of compilation but not any more.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6413,
    "codeText": "TS6413",
    "title": "Entering conditional exports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6414,
    "codeText": "TS6414",
    "title": "Resolved under condition '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6415,
    "codeText": "TS6415",
    "title": "Failed to resolve under condition '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6416,
    "codeText": "TS6416",
    "title": "Exiting conditional exports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6417,
    "codeText": "TS6417",
    "title": "Searching all ancestor node_modules directories for preferred extensions: {0}.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6418,
    "codeText": "TS6418",
    "title": "Searching all ancestor node_modules directories for fallback extensions: {0}.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6500,
    "codeText": "TS6500",
    "title": "The expected type comes from property '{0}' which is declared here on type '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6501,
    "codeText": "TS6501",
    "title": "The expected type comes from this index signature.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6502,
    "codeText": "TS6502",
    "title": "The expected type comes from the return type of this signature.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6503,
    "codeText": "TS6503",
    "title": "Print names of files that are part of the compilation and then stop processing.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6504,
    "codeText": "TS6504",
    "title": "File '{0}' is a JavaScript file. Did you mean to enable the 'allowJs' option?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 6505,
    "codeText": "TS6505",
    "title": "Print names of files and the reason they are part of the compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6506,
    "codeText": "TS6506",
    "title": "Consider adding a 'declare' modifier to this class.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6600,
    "codeText": "TS6600",
    "title": "Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6601,
    "codeText": "TS6601",
    "title": "Allow 'import x from y' when a module doesn't have a default export.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6602,
    "codeText": "TS6602",
    "title": "Allow accessing UMD globals from modules.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6603,
    "codeText": "TS6603",
    "title": "Disable error reporting for unreachable code.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6604,
    "codeText": "TS6604",
    "title": "Disable error reporting for unused labels.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6605,
    "codeText": "TS6605",
    "title": "Ensure 'use strict' is always emitted.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6606,
    "codeText": "TS6606",
    "title": "Have recompiles in projects that use 'incremental' and 'watch' mode assume that changes within a file will only affect files directly depending on it.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6607,
    "codeText": "TS6607",
    "title": "Specify the base directory to resolve non-relative module names.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6608,
    "codeText": "TS6608",
    "title": "No longer supported. In early versions, manually set the text encoding for reading files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6609,
    "codeText": "TS6609",
    "title": "Enable error reporting in type-checked JavaScript files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6611,
    "codeText": "TS6611",
    "title": "Enable constraints that allow a TypeScript project to be used with project references.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6612,
    "codeText": "TS6612",
    "title": "Generate .d.ts files from TypeScript and JavaScript files in your project.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6613,
    "codeText": "TS6613",
    "title": "Specify the output directory for generated declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6614,
    "codeText": "TS6614",
    "title": "Create sourcemaps for d.ts files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6615,
    "codeText": "TS6615",
    "title": "Output compiler performance information after building.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6616,
    "codeText": "TS6616",
    "title": "Disables inference for type acquisition by looking at filenames in a project.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6617,
    "codeText": "TS6617",
    "title": "Reduce the number of projects loaded automatically by TypeScript.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6618,
    "codeText": "TS6618",
    "title": "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6619,
    "codeText": "TS6619",
    "title": "Opt a project out of multi-project reference checking when editing.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6620,
    "codeText": "TS6620",
    "title": "Disable preferring source files instead of declaration files when referencing composite projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6621,
    "codeText": "TS6621",
    "title": "Emit more compliant, but verbose and less performant JavaScript for iteration.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6622,
    "codeText": "TS6622",
    "title": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6623,
    "codeText": "TS6623",
    "title": "Only output d.ts files and not JavaScript files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6624,
    "codeText": "TS6624",
    "title": "Emit design-type metadata for decorated declarations in source files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6625,
    "codeText": "TS6625",
    "title": "Disable the type acquisition for JavaScript projects",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6626,
    "codeText": "TS6626",
    "title": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6627,
    "codeText": "TS6627",
    "title": "Filters results from the `include` option.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6628,
    "codeText": "TS6628",
    "title": "Remove a list of directories from the watch process.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6629,
    "codeText": "TS6629",
    "title": "Remove a list of files from the watch mode's processing.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6630,
    "codeText": "TS6630",
    "title": "Enable experimental support for TC39 stage 2 draft decorators.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6631,
    "codeText": "TS6631",
    "title": "Print files read during the compilation including why it was included.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6632,
    "codeText": "TS6632",
    "title": "Output more detailed compiler performance information after building.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6633,
    "codeText": "TS6633",
    "title": "Specify one or more path or node module references to base configuration files from which settings are inherited.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6634,
    "codeText": "TS6634",
    "title": "Specify what approach the watcher should use if the system runs out of native file watchers.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6635,
    "codeText": "TS6635",
    "title": "Include a list of files. This does not support glob patterns, as opposed to `include`.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6636,
    "codeText": "TS6636",
    "title": "Build all projects, including those that appear to be up to date.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6637,
    "codeText": "TS6637",
    "title": "Ensure that casing is correct in imports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6638,
    "codeText": "TS6638",
    "title": "Emit a v8 CPU profile of the compiler run for debugging.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6639,
    "codeText": "TS6639",
    "title": "Allow importing helper functions from tslib once per project, instead of including them per-file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6641,
    "codeText": "TS6641",
    "title": "Specify a list of glob patterns that match files to be included in compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6642,
    "codeText": "TS6642",
    "title": "Save .tsbuildinfo files to allow for incremental compilation of projects.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6643,
    "codeText": "TS6643",
    "title": "Include sourcemap files inside the emitted JavaScript.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6644,
    "codeText": "TS6644",
    "title": "Include source code in the sourcemaps inside the emitted JavaScript.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6645,
    "codeText": "TS6645",
    "title": "Ensure that each file can be safely transpiled without relying on other imports.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6646,
    "codeText": "TS6646",
    "title": "Specify what JSX code is generated.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6647,
    "codeText": "TS6647",
    "title": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6648,
    "codeText": "TS6648",
    "title": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6649,
    "codeText": "TS6649",
    "title": "Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6650,
    "codeText": "TS6650",
    "title": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6651,
    "codeText": "TS6651",
    "title": "Specify a set of bundled library declaration files that describe the target runtime environment.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6652,
    "codeText": "TS6652",
    "title": "Print the names of emitted files after a compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6653,
    "codeText": "TS6653",
    "title": "Print all of the files read during the compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6654,
    "codeText": "TS6654",
    "title": "Set the language of the messaging from TypeScript. This does not affect emit.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6655,
    "codeText": "TS6655",
    "title": "Specify the location where debugger should locate map files instead of generated locations.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6656,
    "codeText": "TS6656",
    "title": "Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6657,
    "codeText": "TS6657",
    "title": "Specify what module code is generated.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6658,
    "codeText": "TS6658",
    "title": "Specify how TypeScript looks up a file from a given module specifier.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6659,
    "codeText": "TS6659",
    "title": "Set the newline character for emitting files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6660,
    "codeText": "TS6660",
    "title": "Disable emitting files from a compilation.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6661,
    "codeText": "TS6661",
    "title": "Disable generating custom helper functions like '__extends' in compiled output.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6662,
    "codeText": "TS6662",
    "title": "Disable emitting files if any type checking errors are reported.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6663,
    "codeText": "TS6663",
    "title": "Disable truncating types in error messages.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6664,
    "codeText": "TS6664",
    "title": "Enable error reporting for fallthrough cases in switch statements.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6665,
    "codeText": "TS6665",
    "title": "Enable error reporting for expressions and declarations with an implied 'any' type.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6666,
    "codeText": "TS6666",
    "title": "Ensure overriding members in derived classes are marked with an override modifier.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6667,
    "codeText": "TS6667",
    "title": "Enable error reporting for codepaths that do not explicitly return in a function.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6668,
    "codeText": "TS6668",
    "title": "Enable error reporting when 'this' is given the type 'any'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6669,
    "codeText": "TS6669",
    "title": "Disable adding 'use strict' directives in emitted JavaScript files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6670,
    "codeText": "TS6670",
    "title": "Disable including any library files, including the default lib.d.ts.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6671,
    "codeText": "TS6671",
    "title": "Enforces using indexed accessors for keys declared using an indexed type.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6672,
    "codeText": "TS6672",
    "title": "Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6673,
    "codeText": "TS6673",
    "title": "Disable strict checking of generic signatures in function types.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6674,
    "codeText": "TS6674",
    "title": "Add 'undefined' to a type when accessed using an index.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6675,
    "codeText": "TS6675",
    "title": "Enable error reporting when local variables aren't read.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6676,
    "codeText": "TS6676",
    "title": "Raise an error when a function parameter isn't read.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6677,
    "codeText": "TS6677",
    "title": "Deprecated setting. Use 'outFile' instead.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6678,
    "codeText": "TS6678",
    "title": "Specify an output folder for all emitted files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6679,
    "codeText": "TS6679",
    "title": "Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6680,
    "codeText": "TS6680",
    "title": "Specify a set of entries that re-map imports to additional lookup locations.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6681,
    "codeText": "TS6681",
    "title": "Specify a list of language service plugins to include.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6682,
    "codeText": "TS6682",
    "title": "Disable erasing 'const enum' declarations in generated code.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6683,
    "codeText": "TS6683",
    "title": "Disable resolving symlinks to their realpath. This correlates to the same flag in node.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6684,
    "codeText": "TS6684",
    "title": "Disable wiping the console in watch mode.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6685,
    "codeText": "TS6685",
    "title": "Enable color and formatting in TypeScript's output to make compiler errors easier to read.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6686,
    "codeText": "TS6686",
    "title": "Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6687,
    "codeText": "TS6687",
    "title": "Specify an array of objects that specify paths for projects. Used in project references.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6688,
    "codeText": "TS6688",
    "title": "Disable emitting comments.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6689,
    "codeText": "TS6689",
    "title": "Enable importing .json files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6690,
    "codeText": "TS6690",
    "title": "Specify the root folder within your source files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6691,
    "codeText": "TS6691",
    "title": "Allow multiple folders to be treated as one when resolving modules.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6692,
    "codeText": "TS6692",
    "title": "Skip type checking .d.ts files that are included with TypeScript.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6693,
    "codeText": "TS6693",
    "title": "Skip type checking all .d.ts files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6694,
    "codeText": "TS6694",
    "title": "Create source map files for emitted JavaScript files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6695,
    "codeText": "TS6695",
    "title": "Specify the root path for debuggers to find the reference source code.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6697,
    "codeText": "TS6697",
    "title": "Check that the arguments for 'bind', 'call', and 'apply' methods match the original function.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6698,
    "codeText": "TS6698",
    "title": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6699,
    "codeText": "TS6699",
    "title": "When type checking, take into account 'null' and 'undefined'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6700,
    "codeText": "TS6700",
    "title": "Check for class properties that are declared but not set in the constructor.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6701,
    "codeText": "TS6701",
    "title": "Disable emitting declarations that have '@internal' in their JSDoc comments.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6702,
    "codeText": "TS6702",
    "title": "Disable reporting of excess property errors during the creation of object literals.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6703,
    "codeText": "TS6703",
    "title": "Suppress 'noImplicitAny' errors when indexing objects that lack index signatures.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6704,
    "codeText": "TS6704",
    "title": "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6705,
    "codeText": "TS6705",
    "title": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6706,
    "codeText": "TS6706",
    "title": "Log paths used during the 'moduleResolution' process.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6707,
    "codeText": "TS6707",
    "title": "Specify the path to .tsbuildinfo incremental compilation file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6709,
    "codeText": "TS6709",
    "title": "Specify options for automatic acquisition of declaration files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6710,
    "codeText": "TS6710",
    "title": "Specify multiple folders that act like './node_modules/@types'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6711,
    "codeText": "TS6711",
    "title": "Specify type package names to be included without being referenced in a source file.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6712,
    "codeText": "TS6712",
    "title": "Emit ECMAScript-standard-compliant class fields.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6713,
    "codeText": "TS6713",
    "title": "Enable verbose logging.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6714,
    "codeText": "TS6714",
    "title": "Specify how directories are watched on systems that lack recursive file-watching functionality.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6715,
    "codeText": "TS6715",
    "title": "Specify how the TypeScript watch mode works.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6717,
    "codeText": "TS6717",
    "title": "Require undeclared properties from index signatures to use element accesses.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6718,
    "codeText": "TS6718",
    "title": "Specify emit/checking behavior for imports that are only used for types.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6803,
    "codeText": "TS6803",
    "title": "Default catch clause variables as 'unknown' instead of 'any'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6804,
    "codeText": "TS6804",
    "title": "Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6900,
    "codeText": "TS6900",
    "title": "one of:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6901,
    "codeText": "TS6901",
    "title": "one or more:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6902,
    "codeText": "TS6902",
    "title": "type:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6903,
    "codeText": "TS6903",
    "title": "default:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6904,
    "codeText": "TS6904",
    "title": "module === \"system\" or esModuleInterop",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6905,
    "codeText": "TS6905",
    "title": "`false`, unless `strict` is set",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6906,
    "codeText": "TS6906",
    "title": "`false`, unless `composite` is set",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6907,
    "codeText": "TS6907",
    "title": "`[\"node_modules\", \"bower_components\", \"jspm_packages\"]`, plus the value of `outDir` if one is specified.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6908,
    "codeText": "TS6908",
    "title": "`[]` if `files` is specified, otherwise `[\"**/*\"]`",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6909,
    "codeText": "TS6909",
    "title": "`true` if `composite`, `false` otherwise",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6911,
    "codeText": "TS6911",
    "title": "Computed from the list of input files",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6912,
    "codeText": "TS6912",
    "title": "Platform specific",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6913,
    "codeText": "TS6913",
    "title": "You can learn about all of the compiler options at {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6914,
    "codeText": "TS6914",
    "title": "Including --watch, -w will start watching the current project for the file changes. Once set, you can config watch mode with:",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6915,
    "codeText": "TS6915",
    "title": "Using --build, -b will make tsc behave more like a build orchestrator than a compiler. This is used to trigger building composite projects which you can learn more about at {0}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6916,
    "codeText": "TS6916",
    "title": "COMMON COMMANDS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6917,
    "codeText": "TS6917",
    "title": "ALL COMPILER OPTIONS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6918,
    "codeText": "TS6918",
    "title": "WATCH OPTIONS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6919,
    "codeText": "TS6919",
    "title": "BUILD OPTIONS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6920,
    "codeText": "TS6920",
    "title": "COMMON COMPILER OPTIONS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6921,
    "codeText": "TS6921",
    "title": "COMMAND LINE FLAGS",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6922,
    "codeText": "TS6922",
    "title": "tsc: The TypeScript Compiler",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6923,
    "codeText": "TS6923",
    "title": "Compiles the current project (tsconfig.json in the working directory.)",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6924,
    "codeText": "TS6924",
    "title": "Ignoring tsconfig.json, compiles the specified files with default compiler options.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6925,
    "codeText": "TS6925",
    "title": "Build a composite project in the working directory.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6926,
    "codeText": "TS6926",
    "title": "Creates a tsconfig.json with the recommended settings in the working directory.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6927,
    "codeText": "TS6927",
    "title": "Compiles the TypeScript project located at the specified path.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6928,
    "codeText": "TS6928",
    "title": "An expanded version of this information, showing all possible compiler options",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6929,
    "codeText": "TS6929",
    "title": "Compiles the current project, with additional settings.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6930,
    "codeText": "TS6930",
    "title": "`true` for ES2022 and above, including ESNext.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 6931,
    "codeText": "TS6931",
    "title": "List of file name suffixes to search when resolving a module.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7005,
    "codeText": "TS7005",
    "title": "Variable '{0}' implicitly has an '{1}' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7006,
    "codeText": "TS7006",
    "title": "Parameter '{0}' implicitly has an '{1}' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7008,
    "codeText": "TS7008",
    "title": "Member '{0}' implicitly has an '{1}' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7009,
    "codeText": "TS7009",
    "title": "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7010,
    "codeText": "TS7010",
    "title": "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7011,
    "codeText": "TS7011",
    "title": "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7012,
    "codeText": "TS7012",
    "title": "This overload implicitly returns the type '{0}' because it lacks a return type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7013,
    "codeText": "TS7013",
    "title": "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7014,
    "codeText": "TS7014",
    "title": "Function type, which lacks return-type annotation, implicitly has an '{0}' return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7015,
    "codeText": "TS7015",
    "title": "Element implicitly has an 'any' type because index expression is not of type 'number'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7016,
    "codeText": "TS7016",
    "title": "Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7017,
    "codeText": "TS7017",
    "title": "Element implicitly has an 'any' type because type '{0}' has no index signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7018,
    "codeText": "TS7018",
    "title": "Object literal's property '{0}' implicitly has an '{1}' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7019,
    "codeText": "TS7019",
    "title": "Rest parameter '{0}' implicitly has an 'any[]' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7020,
    "codeText": "TS7020",
    "title": "Call signature, which lacks return-type annotation, implicitly has an 'any' return type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7022,
    "codeText": "TS7022",
    "title": "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7023,
    "codeText": "TS7023",
    "title": "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7024,
    "codeText": "TS7024",
    "title": "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7025,
    "codeText": "TS7025",
    "title": "Generator implicitly has yield type '{0}' because it does not yield any values. Consider supplying a return type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7026,
    "codeText": "TS7026",
    "title": "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7027,
    "codeText": "TS7027",
    "title": "Unreachable code detected.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7028,
    "codeText": "TS7028",
    "title": "Unused label.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7029,
    "codeText": "TS7029",
    "title": "Fallthrough case in switch.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7030,
    "codeText": "TS7030",
    "title": "Not all code paths return a value.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7031,
    "codeText": "TS7031",
    "title": "Binding element '{0}' implicitly has an '{1}' type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7032,
    "codeText": "TS7032",
    "title": "Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7033,
    "codeText": "TS7033",
    "title": "Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7034,
    "codeText": "TS7034",
    "title": "Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7035,
    "codeText": "TS7035",
    "title": "Try `npm i --save-dev @types/{1}` if it exists or add a new declaration (.d.ts) file containing `declare module '{0}';`",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7036,
    "codeText": "TS7036",
    "title": "Dynamic import's specifier must be of type 'string', but here has type '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7037,
    "codeText": "TS7037",
    "title": "Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 7038,
    "codeText": "TS7038",
    "title": "Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 7039,
    "codeText": "TS7039",
    "title": "Mapped object type implicitly has an 'any' template type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7040,
    "codeText": "TS7040",
    "title": "If the '{0}' package actually exposes this module, consider sending a pull request to amend 'https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/{1}'",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7041,
    "codeText": "TS7041",
    "title": "The containing arrow function captures the global value of 'this'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7042,
    "codeText": "TS7042",
    "title": "Module '{0}' was resolved to '{1}', but '--resolveJsonModule' is not used.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7043,
    "codeText": "TS7043",
    "title": "Variable '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7044,
    "codeText": "TS7044",
    "title": "Parameter '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7045,
    "codeText": "TS7045",
    "title": "Member '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7046,
    "codeText": "TS7046",
    "title": "Variable '{0}' implicitly has type '{1}' in some locations, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7047,
    "codeText": "TS7047",
    "title": "Rest parameter '{0}' implicitly has an 'any[]' type, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7048,
    "codeText": "TS7048",
    "title": "Property '{0}' implicitly has type 'any', but a better type for its get accessor may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7049,
    "codeText": "TS7049",
    "title": "Property '{0}' implicitly has type 'any', but a better type for its set accessor may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7050,
    "codeText": "TS7050",
    "title": "'{0}' implicitly has an '{1}' return type, but a better type may be inferred from usage.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 7051,
    "codeText": "TS7051",
    "title": "Parameter has a name but no type. Did you mean '{0}: {1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7052,
    "codeText": "TS7052",
    "title": "Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7053,
    "codeText": "TS7053",
    "title": "Element implicitly has an 'any' type because expression of type '{0}' can't be used to index type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7054,
    "codeText": "TS7054",
    "title": "No index signature with a parameter of type '{0}' was found on type '{1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7055,
    "codeText": "TS7055",
    "title": "'{0}', which lacks return-type annotation, implicitly has an '{1}' yield type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7056,
    "codeText": "TS7056",
    "title": "The inferred type of this node exceeds the maximum length the compiler will serialize. An explicit type annotation is needed.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7057,
    "codeText": "TS7057",
    "title": "'yield' expression implicitly results in an 'any' type because its containing generator lacks a return-type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7058,
    "codeText": "TS7058",
    "title": "If the '{0}' package actually exposes this module, try adding a new declaration (.d.ts) file containing `declare module '{1}';`",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7059,
    "codeText": "TS7059",
    "title": "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7060,
    "codeText": "TS7060",
    "title": "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 7061,
    "codeText": "TS7061",
    "title": "A mapped type may not declare properties or methods.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8000,
    "codeText": "TS8000",
    "title": "You cannot rename this element.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8001,
    "codeText": "TS8001",
    "title": "You cannot rename elements that are defined in the standard TypeScript library.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8002,
    "codeText": "TS8002",
    "title": "'import ... =' can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8003,
    "codeText": "TS8003",
    "title": "'export =' can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8004,
    "codeText": "TS8004",
    "title": "Type parameter declarations can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8005,
    "codeText": "TS8005",
    "title": "'implements' clauses can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8006,
    "codeText": "TS8006",
    "title": "'{0}' declarations can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8008,
    "codeText": "TS8008",
    "title": "Type aliases can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8009,
    "codeText": "TS8009",
    "title": "The '{0}' modifier can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8010,
    "codeText": "TS8010",
    "title": "Type annotations can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8011,
    "codeText": "TS8011",
    "title": "Type arguments can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8012,
    "codeText": "TS8012",
    "title": "Parameter modifiers can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8013,
    "codeText": "TS8013",
    "title": "Non-null assertions can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8016,
    "codeText": "TS8016",
    "title": "Type assertion expressions can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8017,
    "codeText": "TS8017",
    "title": "Octal literal types must use ES2015 syntax. Use the syntax '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8018,
    "codeText": "TS8018",
    "title": "Octal literals are not allowed in enums members initializer. Use the syntax '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8019,
    "codeText": "TS8019",
    "title": "Report errors in .js files.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 8020,
    "codeText": "TS8020",
    "title": "JSDoc types can only be used inside documentation comments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8021,
    "codeText": "TS8021",
    "title": "JSDoc '@typedef' tag should either have a type annotation or be followed by '@property' or '@member' tags.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8022,
    "codeText": "TS8022",
    "title": "JSDoc '@{0}' is not attached to a class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8023,
    "codeText": "TS8023",
    "title": "JSDoc '@{0} {1}' does not match the 'extends {2}' clause.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8024,
    "codeText": "TS8024",
    "title": "JSDoc '@param' tag has name '{0}', but there is no parameter with that name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8025,
    "codeText": "TS8025",
    "title": "Class declarations cannot have more than one '@augments' or '@extends' tag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8026,
    "codeText": "TS8026",
    "title": "Expected {0} type arguments; provide these with an '@extends' tag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8027,
    "codeText": "TS8027",
    "title": "Expected {0}-{1} type arguments; provide these with an '@extends' tag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8028,
    "codeText": "TS8028",
    "title": "JSDoc '...' may only appear in the last parameter of a signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8029,
    "codeText": "TS8029",
    "title": "JSDoc '@param' tag has name '{0}', but there is no parameter with that name. It would match 'arguments' if it had an array type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8030,
    "codeText": "TS8030",
    "title": "The type of a function declaration must match the function's signature.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8031,
    "codeText": "TS8031",
    "title": "You cannot rename a module via a global import.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8032,
    "codeText": "TS8032",
    "title": "Qualified name '{0}' is not allowed without a leading '@param {object} {1}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8033,
    "codeText": "TS8033",
    "title": "A JSDoc '@typedef' comment may not contain multiple '@type' tags.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8034,
    "codeText": "TS8034",
    "title": "The tag was first specified here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8035,
    "codeText": "TS8035",
    "title": "You cannot rename elements that are defined in a 'node_modules' folder.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8036,
    "codeText": "TS8036",
    "title": "You cannot rename elements that are defined in another 'node_modules' folder.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8037,
    "codeText": "TS8037",
    "title": "Type satisfaction expressions can only be used in TypeScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8038,
    "codeText": "TS8038",
    "title": "Decorators must come after 'export' or 'export default' in JavaScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 8039,
    "codeText": "TS8039",
    "title": "A JSDoc '@template' tag may not follow a '@typedef', '@callback', or '@overload' tag",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 9005,
    "codeText": "TS9005",
    "title": "Declaration emit for this file requires using private name '{0}'. An explicit type annotation may unblock declaration emit.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 9006,
    "codeText": "TS9006",
    "title": "Declaration emit for this file requires using private name '{0}' from module '{1}'. An explicit type annotation may unblock declaration emit.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17000,
    "codeText": "TS17000",
    "title": "JSX attributes must only be assigned a non-empty 'expression'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17001,
    "codeText": "TS17001",
    "title": "JSX elements cannot have multiple attributes with the same name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17002,
    "codeText": "TS17002",
    "title": "Expected corresponding JSX closing tag for '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17004,
    "codeText": "TS17004",
    "title": "Cannot use JSX unless the '--jsx' flag is provided.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17005,
    "codeText": "TS17005",
    "title": "A constructor cannot contain a 'super' call when its class extends 'null'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17006,
    "codeText": "TS17006",
    "title": "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17007,
    "codeText": "TS17007",
    "title": "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17008,
    "codeText": "TS17008",
    "title": "JSX element '{0}' has no corresponding closing tag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17009,
    "codeText": "TS17009",
    "title": "'super' must be called before accessing 'this' in the constructor of a derived class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17010,
    "codeText": "TS17010",
    "title": "Unknown type acquisition option '{0}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17011,
    "codeText": "TS17011",
    "title": "'super' must be called before accessing a property of 'super' in the constructor of a derived class.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17012,
    "codeText": "TS17012",
    "title": "'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17013,
    "codeText": "TS17013",
    "title": "Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17014,
    "codeText": "TS17014",
    "title": "JSX fragment has no corresponding closing tag.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17015,
    "codeText": "TS17015",
    "title": "Expected corresponding closing tag for JSX fragment.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17016,
    "codeText": "TS17016",
    "title": "The 'jsxFragmentFactory' compiler option must be provided to use JSX fragments with the 'jsxFactory' compiler option.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17017,
    "codeText": "TS17017",
    "title": "An @jsxFrag pragma is required when using an @jsx pragma with JSX fragments.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17018,
    "codeText": "TS17018",
    "title": "Unknown type acquisition option '{0}'. Did you mean '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17019,
    "codeText": "TS17019",
    "title": "'{0}' at the end of a type is not valid TypeScript syntax. Did you mean to write '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17020,
    "codeText": "TS17020",
    "title": "'{0}' at the start of a type is not valid TypeScript syntax. Did you mean to write '{1}'?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 17021,
    "codeText": "TS17021",
    "title": "Unicode escape sequence cannot appear here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18000,
    "codeText": "TS18000",
    "title": "Circularity detected while resolving configuration: {0}",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18002,
    "codeText": "TS18002",
    "title": "The 'files' list in config file '{0}' is empty.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18003,
    "codeText": "TS18003",
    "title": "No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18004,
    "codeText": "TS18004",
    "title": "No value exists in scope for the shorthand property '{0}'. Either declare one or provide an initializer.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18006,
    "codeText": "TS18006",
    "title": "Classes may not have a field named 'constructor'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18007,
    "codeText": "TS18007",
    "title": "JSX expressions may not use the comma operator. Did you mean to write an array?",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18009,
    "codeText": "TS18009",
    "title": "Private identifiers cannot be used as parameters.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18010,
    "codeText": "TS18010",
    "title": "An accessibility modifier cannot be used with a private identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18011,
    "codeText": "TS18011",
    "title": "The operand of a 'delete' operator cannot be a private identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18012,
    "codeText": "TS18012",
    "title": "'#constructor' is a reserved word.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18013,
    "codeText": "TS18013",
    "title": "Property '{0}' is not accessible outside class '{1}' because it has a private identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18014,
    "codeText": "TS18014",
    "title": "The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18015,
    "codeText": "TS18015",
    "title": "Property '{0}' in type '{1}' refers to a different member that cannot be accessed from within type '{2}'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18016,
    "codeText": "TS18016",
    "title": "Private identifiers are not allowed outside class bodies.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18017,
    "codeText": "TS18017",
    "title": "The shadowing declaration of '{0}' is defined here",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18018,
    "codeText": "TS18018",
    "title": "The declaration of '{0}' that you probably intended to use is defined here",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18019,
    "codeText": "TS18019",
    "title": "'{0}' modifier cannot be used with a private identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18024,
    "codeText": "TS18024",
    "title": "An enum member cannot be named with a private identifier.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18026,
    "codeText": "TS18026",
    "title": "'#!' can only be used at the start of a file.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18027,
    "codeText": "TS18027",
    "title": "Compiler reserves name '{0}' when emitting private identifier downlevel.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18028,
    "codeText": "TS18028",
    "title": "Private identifiers are only available when targeting ECMAScript 2015 and higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18029,
    "codeText": "TS18029",
    "title": "Private identifiers are not allowed in variable declarations.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18030,
    "codeText": "TS18030",
    "title": "An optional chain cannot contain private identifiers.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18031,
    "codeText": "TS18031",
    "title": "The intersection '{0}' was reduced to 'never' because property '{1}' has conflicting types in some constituents.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18032,
    "codeText": "TS18032",
    "title": "The intersection '{0}' was reduced to 'never' because property '{1}' exists in multiple constituents and is private in some.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18033,
    "codeText": "TS18033",
    "title": "Type '{0}' is not assignable to type '{1}' as required for computed enum member values.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18034,
    "codeText": "TS18034",
    "title": "Specify the JSX fragment factory function to use when targeting 'react' JSX emit with 'jsxFactory' compiler option is specified, e.g. 'Fragment'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 18035,
    "codeText": "TS18035",
    "title": "Invalid value for 'jsxFragmentFactory'. '{0}' is not a valid identifier or qualified-name.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18036,
    "codeText": "TS18036",
    "title": "Class decorators can't be used with static private identifier. Consider removing the experimental decorator.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18037,
    "codeText": "TS18037",
    "title": "Await expression cannot be used inside a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18038,
    "codeText": "TS18038",
    "title": "'For await' loops cannot be used inside a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18039,
    "codeText": "TS18039",
    "title": "Invalid use of '{0}'. It cannot be used inside a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18041,
    "codeText": "TS18041",
    "title": "A 'return' statement cannot be used inside a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18042,
    "codeText": "TS18042",
    "title": "'{0}' is a type and cannot be imported in JavaScript files. Use '{1}' in a JSDoc type annotation.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18043,
    "codeText": "TS18043",
    "title": "Types cannot appear in export declarations in JavaScript files.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18044,
    "codeText": "TS18044",
    "title": "'{0}' is automatically exported here.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 18045,
    "codeText": "TS18045",
    "title": "Properties with the 'accessor' modifier are only available when targeting ECMAScript 2015 and higher.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18046,
    "codeText": "TS18046",
    "title": "'{0}' is of type 'unknown'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18047,
    "codeText": "TS18047",
    "title": "'{0}' is possibly 'null'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18048,
    "codeText": "TS18048",
    "title": "'{0}' is possibly 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18049,
    "codeText": "TS18049",
    "title": "'{0}' is possibly 'null' or 'undefined'.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18050,
    "codeText": "TS18050",
    "title": "The value '{0}' cannot be used here.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18051,
    "codeText": "TS18051",
    "title": "Compiler option '{0}' cannot be given an empty string.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18052,
    "codeText": "TS18052",
    "title": "Non-abstract class '{0}' does not implement all abstract members of '{1}'",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18053,
    "codeText": "TS18053",
    "title": "Its type '{0}' is not a valid JSX element type.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 18054,
    "codeText": "TS18054",
    "title": "'await using' statements cannot be used inside a class static block.",
    "category": "error",
    "documentation": ""
  },
  {
    "code": 69010,
    "codeText": "TS69010",
    "title": "module === `AMD` or `UMD` or `System` or `ES6`, then `Classic`, Otherwise `Node`",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 80001,
    "codeText": "TS80001",
    "title": "File is a CommonJS module; it may be converted to an ES module.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80002,
    "codeText": "TS80002",
    "title": "This constructor function may be converted to a class declaration.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80003,
    "codeText": "TS80003",
    "title": "Import may be converted to a default import.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80004,
    "codeText": "TS80004",
    "title": "JSDoc types may be moved to TypeScript types.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80005,
    "codeText": "TS80005",
    "title": "'require' call may be converted to an import.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80006,
    "codeText": "TS80006",
    "title": "This may be converted to an async function.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80007,
    "codeText": "TS80007",
    "title": "'await' has no effect on the type of this expression.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80008,
    "codeText": "TS80008",
    "title": "Numeric literals with absolute values equal to 2^53 or greater are too large to be represented accurately as integers.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80009,
    "codeText": "TS80009",
    "title": "JSDoc typedef may be converted to TypeScript type.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 80010,
    "codeText": "TS80010",
    "title": "JSDoc typedefs may be converted to TypeScript types.",
    "category": "suggestion",
    "documentation": ""
  },
  {
    "code": 90001,
    "codeText": "TS90001",
    "title": "Add missing 'super()' call",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90002,
    "codeText": "TS90002",
    "title": "Make 'super()' call the first statement in the constructor",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90003,
    "codeText": "TS90003",
    "title": "Change 'extends' to 'implements'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90004,
    "codeText": "TS90004",
    "title": "Remove unused declaration for: '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90005,
    "codeText": "TS90005",
    "title": "Remove import from '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90006,
    "codeText": "TS90006",
    "title": "Implement interface '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90007,
    "codeText": "TS90007",
    "title": "Implement inherited abstract class",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90008,
    "codeText": "TS90008",
    "title": "Add '{0}.' to unresolved variable",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90010,
    "codeText": "TS90010",
    "title": "Remove variable statement",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90011,
    "codeText": "TS90011",
    "title": "Remove template tag",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90012,
    "codeText": "TS90012",
    "title": "Remove type parameters",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90013,
    "codeText": "TS90013",
    "title": "Import '{0}' from \"{1}\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90014,
    "codeText": "TS90014",
    "title": "Change '{0}' to '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90016,
    "codeText": "TS90016",
    "title": "Declare property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90017,
    "codeText": "TS90017",
    "title": "Add index signature for property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90018,
    "codeText": "TS90018",
    "title": "Disable checking for this file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90019,
    "codeText": "TS90019",
    "title": "Ignore this error message",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90020,
    "codeText": "TS90020",
    "title": "Initialize property '{0}' in the constructor",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90021,
    "codeText": "TS90021",
    "title": "Initialize static property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90022,
    "codeText": "TS90022",
    "title": "Change spelling to '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90023,
    "codeText": "TS90023",
    "title": "Declare method '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90024,
    "codeText": "TS90024",
    "title": "Declare static method '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90025,
    "codeText": "TS90025",
    "title": "Prefix '{0}' with an underscore",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90026,
    "codeText": "TS90026",
    "title": "Rewrite as the indexed access type '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90027,
    "codeText": "TS90027",
    "title": "Declare static property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90028,
    "codeText": "TS90028",
    "title": "Call decorator expression",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90029,
    "codeText": "TS90029",
    "title": "Add async modifier to containing function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90030,
    "codeText": "TS90030",
    "title": "Replace 'infer {0}' with 'unknown'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90031,
    "codeText": "TS90031",
    "title": "Replace all unused 'infer' with 'unknown'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90034,
    "codeText": "TS90034",
    "title": "Add parameter name",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90035,
    "codeText": "TS90035",
    "title": "Declare private property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90036,
    "codeText": "TS90036",
    "title": "Replace '{0}' with 'Promise<{1}>'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90037,
    "codeText": "TS90037",
    "title": "Fix all incorrect return type of an async functions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90038,
    "codeText": "TS90038",
    "title": "Declare private method '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90039,
    "codeText": "TS90039",
    "title": "Remove unused destructuring declaration",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90041,
    "codeText": "TS90041",
    "title": "Remove unused declarations for: '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90053,
    "codeText": "TS90053",
    "title": "Declare a private field named '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90054,
    "codeText": "TS90054",
    "title": "Includes imports of types referenced by '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90055,
    "codeText": "TS90055",
    "title": "Remove 'type' from import declaration from \"{0}\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90056,
    "codeText": "TS90056",
    "title": "Remove 'type' from import of '{0}' from \"{1}\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90057,
    "codeText": "TS90057",
    "title": "Add import from \"{0}\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90058,
    "codeText": "TS90058",
    "title": "Update import from \"{0}\"",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90059,
    "codeText": "TS90059",
    "title": "Export '{0}' from module '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 90060,
    "codeText": "TS90060",
    "title": "Export all referenced locals",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95001,
    "codeText": "TS95001",
    "title": "Convert function to an ES2015 class",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95003,
    "codeText": "TS95003",
    "title": "Convert '{0}' to '{1} in {0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95004,
    "codeText": "TS95004",
    "title": "Extract to {0} in {1}",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95005,
    "codeText": "TS95005",
    "title": "Extract function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95006,
    "codeText": "TS95006",
    "title": "Extract constant",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95007,
    "codeText": "TS95007",
    "title": "Extract to {0} in enclosing scope",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95008,
    "codeText": "TS95008",
    "title": "Extract to {0} in {1} scope",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95009,
    "codeText": "TS95009",
    "title": "Annotate with type from JSDoc",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95011,
    "codeText": "TS95011",
    "title": "Infer type of '{0}' from usage",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95012,
    "codeText": "TS95012",
    "title": "Infer parameter types from usage",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95013,
    "codeText": "TS95013",
    "title": "Convert to default import",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95014,
    "codeText": "TS95014",
    "title": "Install '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95015,
    "codeText": "TS95015",
    "title": "Replace import with '{0}'.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95016,
    "codeText": "TS95016",
    "title": "Use synthetic 'default' member.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95017,
    "codeText": "TS95017",
    "title": "Convert to ES module",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95018,
    "codeText": "TS95018",
    "title": "Add 'undefined' type to property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95019,
    "codeText": "TS95019",
    "title": "Add initializer to property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95020,
    "codeText": "TS95020",
    "title": "Add definite assignment assertion to property '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95021,
    "codeText": "TS95021",
    "title": "Convert all type literals to mapped type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95022,
    "codeText": "TS95022",
    "title": "Add all missing members",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95023,
    "codeText": "TS95023",
    "title": "Infer all types from usage",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95024,
    "codeText": "TS95024",
    "title": "Delete all unused declarations",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95025,
    "codeText": "TS95025",
    "title": "Prefix all unused declarations with '_' where possible",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95026,
    "codeText": "TS95026",
    "title": "Fix all detected spelling errors",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95027,
    "codeText": "TS95027",
    "title": "Add initializers to all uninitialized properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95028,
    "codeText": "TS95028",
    "title": "Add definite assignment assertions to all uninitialized properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95029,
    "codeText": "TS95029",
    "title": "Add undefined type to all uninitialized properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95030,
    "codeText": "TS95030",
    "title": "Change all jsdoc-style types to TypeScript",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95031,
    "codeText": "TS95031",
    "title": "Change all jsdoc-style types to TypeScript (and add '| undefined' to nullable types)",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95032,
    "codeText": "TS95032",
    "title": "Implement all unimplemented interfaces",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95033,
    "codeText": "TS95033",
    "title": "Install all missing types packages",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95034,
    "codeText": "TS95034",
    "title": "Rewrite all as indexed access types",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95035,
    "codeText": "TS95035",
    "title": "Convert all to default imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95036,
    "codeText": "TS95036",
    "title": "Make all 'super()' calls the first statement in their constructor",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95037,
    "codeText": "TS95037",
    "title": "Add qualifier to all unresolved variables matching a member name",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95038,
    "codeText": "TS95038",
    "title": "Change all extended interfaces to 'implements'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95039,
    "codeText": "TS95039",
    "title": "Add all missing super calls",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95040,
    "codeText": "TS95040",
    "title": "Implement all inherited abstract classes",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95041,
    "codeText": "TS95041",
    "title": "Add all missing 'async' modifiers",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95042,
    "codeText": "TS95042",
    "title": "Add '@ts-ignore' to all error messages",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95043,
    "codeText": "TS95043",
    "title": "Annotate everything with types from JSDoc",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95044,
    "codeText": "TS95044",
    "title": "Add '()' to all uncalled decorators",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95045,
    "codeText": "TS95045",
    "title": "Convert all constructor functions to classes",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95046,
    "codeText": "TS95046",
    "title": "Generate 'get' and 'set' accessors",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95047,
    "codeText": "TS95047",
    "title": "Convert 'require' to 'import'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95048,
    "codeText": "TS95048",
    "title": "Convert all 'require' to 'import'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95049,
    "codeText": "TS95049",
    "title": "Move to a new file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95050,
    "codeText": "TS95050",
    "title": "Remove unreachable code",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95051,
    "codeText": "TS95051",
    "title": "Remove all unreachable code",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95052,
    "codeText": "TS95052",
    "title": "Add missing 'typeof'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95053,
    "codeText": "TS95053",
    "title": "Remove unused label",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95054,
    "codeText": "TS95054",
    "title": "Remove all unused labels",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95055,
    "codeText": "TS95055",
    "title": "Convert '{0}' to mapped object type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95056,
    "codeText": "TS95056",
    "title": "Convert namespace import to named imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95057,
    "codeText": "TS95057",
    "title": "Convert named imports to namespace import",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95058,
    "codeText": "TS95058",
    "title": "Add or remove braces in an arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95059,
    "codeText": "TS95059",
    "title": "Add braces to arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95060,
    "codeText": "TS95060",
    "title": "Remove braces from arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95061,
    "codeText": "TS95061",
    "title": "Convert default export to named export",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95062,
    "codeText": "TS95062",
    "title": "Convert named export to default export",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95063,
    "codeText": "TS95063",
    "title": "Add missing enum member '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95064,
    "codeText": "TS95064",
    "title": "Add all missing imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95065,
    "codeText": "TS95065",
    "title": "Convert to async function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95066,
    "codeText": "TS95066",
    "title": "Convert all to async functions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95067,
    "codeText": "TS95067",
    "title": "Add missing call parentheses",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95068,
    "codeText": "TS95068",
    "title": "Add all missing call parentheses",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95069,
    "codeText": "TS95069",
    "title": "Add 'unknown' conversion for non-overlapping types",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95070,
    "codeText": "TS95070",
    "title": "Add 'unknown' to all conversions of non-overlapping types",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95071,
    "codeText": "TS95071",
    "title": "Add missing 'new' operator to call",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95072,
    "codeText": "TS95072",
    "title": "Add missing 'new' operator to all calls",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95073,
    "codeText": "TS95073",
    "title": "Add names to all parameters without names",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95074,
    "codeText": "TS95074",
    "title": "Enable the 'experimentalDecorators' option in your configuration file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95075,
    "codeText": "TS95075",
    "title": "Convert parameters to destructured object",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95077,
    "codeText": "TS95077",
    "title": "Extract type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95078,
    "codeText": "TS95078",
    "title": "Extract to type alias",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95079,
    "codeText": "TS95079",
    "title": "Extract to typedef",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95080,
    "codeText": "TS95080",
    "title": "Infer 'this' type of '{0}' from usage",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95081,
    "codeText": "TS95081",
    "title": "Add 'const' to unresolved variable",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95082,
    "codeText": "TS95082",
    "title": "Add 'const' to all unresolved variables",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95083,
    "codeText": "TS95083",
    "title": "Add 'await'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95084,
    "codeText": "TS95084",
    "title": "Add 'await' to initializer for '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95085,
    "codeText": "TS95085",
    "title": "Fix all expressions possibly missing 'await'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95086,
    "codeText": "TS95086",
    "title": "Remove unnecessary 'await'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95087,
    "codeText": "TS95087",
    "title": "Remove all unnecessary uses of 'await'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95088,
    "codeText": "TS95088",
    "title": "Enable the '--jsx' flag in your configuration file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95089,
    "codeText": "TS95089",
    "title": "Add 'await' to initializers",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95090,
    "codeText": "TS95090",
    "title": "Extract to interface",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95091,
    "codeText": "TS95091",
    "title": "Convert to a bigint numeric literal",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95092,
    "codeText": "TS95092",
    "title": "Convert all to bigint numeric literals",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95093,
    "codeText": "TS95093",
    "title": "Convert 'const' to 'let'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95094,
    "codeText": "TS95094",
    "title": "Prefix with 'declare'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95095,
    "codeText": "TS95095",
    "title": "Prefix all incorrect property declarations with 'declare'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95096,
    "codeText": "TS95096",
    "title": "Convert to template string",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95097,
    "codeText": "TS95097",
    "title": "Add 'export {}' to make this file into a module",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95098,
    "codeText": "TS95098",
    "title": "Set the 'target' option in your configuration file to '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95099,
    "codeText": "TS95099",
    "title": "Set the 'module' option in your configuration file to '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95100,
    "codeText": "TS95100",
    "title": "Convert invalid character to its html entity code",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95101,
    "codeText": "TS95101",
    "title": "Convert all invalid characters to HTML entity code",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95102,
    "codeText": "TS95102",
    "title": "Convert all 'const' to 'let'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95105,
    "codeText": "TS95105",
    "title": "Convert function expression '{0}' to arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95106,
    "codeText": "TS95106",
    "title": "Convert function declaration '{0}' to arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95107,
    "codeText": "TS95107",
    "title": "Fix all implicit-'this' errors",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95108,
    "codeText": "TS95108",
    "title": "Wrap invalid character in an expression container",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95109,
    "codeText": "TS95109",
    "title": "Wrap all invalid characters in an expression container",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95110,
    "codeText": "TS95110",
    "title": "Visit https://aka.ms/tsconfig to read more about this file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95111,
    "codeText": "TS95111",
    "title": "Add a return statement",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95112,
    "codeText": "TS95112",
    "title": "Remove braces from arrow function body",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95113,
    "codeText": "TS95113",
    "title": "Wrap the following body with parentheses which should be an object literal",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95114,
    "codeText": "TS95114",
    "title": "Add all missing return statement",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95115,
    "codeText": "TS95115",
    "title": "Remove braces from all arrow function bodies with relevant issues",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95116,
    "codeText": "TS95116",
    "title": "Wrap all object literal with parentheses",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95117,
    "codeText": "TS95117",
    "title": "Move labeled tuple element modifiers to labels",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95118,
    "codeText": "TS95118",
    "title": "Convert overload list to single signature",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95119,
    "codeText": "TS95119",
    "title": "Generate 'get' and 'set' accessors for all overriding properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95120,
    "codeText": "TS95120",
    "title": "Wrap in JSX fragment",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95121,
    "codeText": "TS95121",
    "title": "Wrap all unparented JSX in JSX fragment",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95122,
    "codeText": "TS95122",
    "title": "Convert arrow function or function expression",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95123,
    "codeText": "TS95123",
    "title": "Convert to anonymous function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95124,
    "codeText": "TS95124",
    "title": "Convert to named function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95125,
    "codeText": "TS95125",
    "title": "Convert to arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95126,
    "codeText": "TS95126",
    "title": "Remove parentheses",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95127,
    "codeText": "TS95127",
    "title": "Could not find a containing arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95128,
    "codeText": "TS95128",
    "title": "Containing function is not an arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95129,
    "codeText": "TS95129",
    "title": "Could not find export statement",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95130,
    "codeText": "TS95130",
    "title": "This file already has a default export",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95131,
    "codeText": "TS95131",
    "title": "Could not find import clause",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95132,
    "codeText": "TS95132",
    "title": "Could not find namespace import or named imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95133,
    "codeText": "TS95133",
    "title": "Selection is not a valid type node",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95134,
    "codeText": "TS95134",
    "title": "No type could be extracted from this type node",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95135,
    "codeText": "TS95135",
    "title": "Could not find property for which to generate accessor",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95136,
    "codeText": "TS95136",
    "title": "Name is not valid",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95137,
    "codeText": "TS95137",
    "title": "Can only convert property with modifier",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95138,
    "codeText": "TS95138",
    "title": "Switch each misused '{0}' to '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95139,
    "codeText": "TS95139",
    "title": "Convert to optional chain expression",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95140,
    "codeText": "TS95140",
    "title": "Could not find convertible access expression",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95141,
    "codeText": "TS95141",
    "title": "Could not find matching access expressions",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95142,
    "codeText": "TS95142",
    "title": "Can only convert logical AND access chains",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95143,
    "codeText": "TS95143",
    "title": "Add 'void' to Promise resolved without a value",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95144,
    "codeText": "TS95144",
    "title": "Add 'void' to all Promises resolved without a value",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95145,
    "codeText": "TS95145",
    "title": "Use element access for '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95146,
    "codeText": "TS95146",
    "title": "Use element access for all undeclared properties.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95147,
    "codeText": "TS95147",
    "title": "Delete all unused imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95148,
    "codeText": "TS95148",
    "title": "Infer function return type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95149,
    "codeText": "TS95149",
    "title": "Return type must be inferred from a function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95150,
    "codeText": "TS95150",
    "title": "Could not determine function return type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95151,
    "codeText": "TS95151",
    "title": "Could not convert to arrow function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95152,
    "codeText": "TS95152",
    "title": "Could not convert to named function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95153,
    "codeText": "TS95153",
    "title": "Could not convert to anonymous function",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95154,
    "codeText": "TS95154",
    "title": "Can only convert string concatenation",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95155,
    "codeText": "TS95155",
    "title": "Selection is not a valid statement or statements",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95156,
    "codeText": "TS95156",
    "title": "Add missing function declaration '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95157,
    "codeText": "TS95157",
    "title": "Add all missing function declarations",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95158,
    "codeText": "TS95158",
    "title": "Method not implemented.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95159,
    "codeText": "TS95159",
    "title": "Function not implemented.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95160,
    "codeText": "TS95160",
    "title": "Add 'override' modifier",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95161,
    "codeText": "TS95161",
    "title": "Remove 'override' modifier",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95162,
    "codeText": "TS95162",
    "title": "Add all missing 'override' modifiers",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95163,
    "codeText": "TS95163",
    "title": "Remove all unnecessary 'override' modifiers",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95164,
    "codeText": "TS95164",
    "title": "Can only convert named export",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95165,
    "codeText": "TS95165",
    "title": "Add missing properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95166,
    "codeText": "TS95166",
    "title": "Add all missing properties",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95167,
    "codeText": "TS95167",
    "title": "Add missing attributes",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95168,
    "codeText": "TS95168",
    "title": "Add all missing attributes",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95169,
    "codeText": "TS95169",
    "title": "Add 'undefined' to optional property type",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95170,
    "codeText": "TS95170",
    "title": "Convert named imports to default import",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95171,
    "codeText": "TS95171",
    "title": "Delete unused '@param' tag '{0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95172,
    "codeText": "TS95172",
    "title": "Delete all unused '@param' tags",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95173,
    "codeText": "TS95173",
    "title": "Rename '@param' tag name '{0}' to '{1}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95174,
    "codeText": "TS95174",
    "title": "Use `{0}`.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95175,
    "codeText": "TS95175",
    "title": "Use `Number.isNaN` in all conditions.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95176,
    "codeText": "TS95176",
    "title": "Convert typedef to TypeScript type.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95177,
    "codeText": "TS95177",
    "title": "Convert all typedef to TypeScript types.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95178,
    "codeText": "TS95178",
    "title": "Move to file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95179,
    "codeText": "TS95179",
    "title": "Cannot move to file, selected file is invalid",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95180,
    "codeText": "TS95180",
    "title": "Use 'import type'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95181,
    "codeText": "TS95181",
    "title": "Use 'type {0}'",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95182,
    "codeText": "TS95182",
    "title": "Fix all with type-only imports",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95183,
    "codeText": "TS95183",
    "title": "Cannot move statements to the selected file",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95184,
    "codeText": "TS95184",
    "title": "Inline variable",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95185,
    "codeText": "TS95185",
    "title": "Could not find variable to inline.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95186,
    "codeText": "TS95186",
    "title": "Variables with multiple declarations cannot be inlined.",
    "category": "message",
    "documentation": ""
  },
  {
    "code": 95187,
    "codeText": "TS95187",
    "title": "Add missing comma for object member completion '{0}'.",
    "category": "message",
    "documentation": ""
  }
]
