{
  "code": 1052,
  "codeText": "TS1052",
  "title": "A 'set' accessor parameter cannot have an initializer.",
  "category": "error",
  "documentation": "A set accessor is only called when a value is being assigned and will always\nprovide a single value, which cannot be optional. Therefore the following is\ninvalid:\n\n```ts\nclass A {\n  set value(a = 0) {}\n}\n```\n",
  "tags": [
    "accessors"
  ],
  "related": [
    1049,
    1051,
    1053
  ],
  "fixes": [
    {
      "title": "Remove the initializer.",
      "body": "Remove the initializer:\n\n```ts\nclass A {\n  set value(a: number) {}\n}\n```\n\nIf you want to be able to be able to have a default value when the property is\nset to `undefined`, add `undefined` to the type annotation and handle the\nbehavior in the implementation:\n\n```ts\nclass A {\n  #a = 0;\n\n  set value(a: number | undefined) {\n    this.#a = a ?? 0;\n  }\n}\n```\n"
    }
  ]
}
